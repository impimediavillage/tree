
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default to secure: No one can access anything unless explicitly allowed.
    match /{document=**} {
      allow read, write: if false;
    }

    // ============== USERS ==============
    match /users/{userId} {
      // Any authenticated user can create their own user document.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can read their own profile.
      // Super Admins can read any user's profile.
      allow get: if request.auth != null && (request.auth.uid == userId || request.auth.token.role == 'Super Admin');
      // Users can update their own profile, but not change their role, credits, or status.
      allow update: if request.auth != null && request.auth.uid == userId 
                    && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'credits', 'status', 'dispensaryId']));
      // Super Admins can update any user profile.
      allow update: if request.auth != null && request.auth.token.role == 'Super Admin';
      // Only Super Admins can delete users.
      allow delete: if request.auth != null && request.auth.token.role == 'Super Admin';
      // Authenticated users can be listed (e.g., by other owners for staff assignment)
      allow list: if request.auth != null;
    }

    // ============== DISPENSARIES ==============
    match /dispensaries/{dispensaryId} {
      // Anyone can create a dispensary application.
      allow create: if true;
      // Anyone can view an approved dispensary's public profile.
      allow get: if resource.data.status == 'Approved';
      // Any authenticated user can list dispensaries (needed for sharing pool)
      allow list: if request.auth != null;
      // Only Super Admins can update a dispensary record.
      allow update, delete: if request.auth != null && request.auth.token.role == 'Super Admin';
    }

    // ============== DISPENSARY TYPES ==============
    match /dispensaryTypes/{typeId} {
      // Anyone can read dispensary types to browse the site.
      allow read: if true;
      // Only Super Admins can create, update, or delete types.
      allow write: if request.auth != null && request.auth.token.role == 'Super Admin';
    }

    // ============== PRODUCT CATEGORIES ==============
     match /dispensaryTypeProductCategories/{docId} {
        // Anyone can read product categories
        allow read: if true;
        // Only Super Admins can modify categories
        allow write: if request.auth != null && request.auth.token.role == 'Super Admin';
     }

    // ============== PRODUCTS ==============
    // This rule group covers all product collections like 'products', 'cannibinoid_store_products', etc.
    match /{productCollection}/{productId} {
      // Anyone can read any product.
      allow read: if true;
      // Only authenticated users who are part of a dispensary can create products.
      // Their UID must match the product owner and dispensaryId must match their token.
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.productOwnerEmail
                    && request.auth.token.dispensaryId == request.resource.data.dispensaryId;
      // Only the owning dispensary's staff/owner can update or delete their own product.
      allow update, delete: if request.auth != null 
                            && request.auth.token.dispensaryId == resource.data.dispensaryId;
    }

    // ============== PRODUCT REQUESTS ==============
    match /productRequests/{requestId} {
      // Anyone authenticated can read requests (though UI will filter).
      allow get: if request.auth != null;
      // Authenticated users with a dispensary can create requests.
      allow create: if request.auth != null && request.auth.token.dispensaryId != null;
      // Only the requester or the owner of the product can update the request.
      allow update: if request.auth != null && 
                      (request.auth.token.dispensaryId == resource.data.requesterDispensaryId || 
                       request.auth.token.dispensaryId == resource.data.productOwnerDispensaryId);
      // Only the requester can delete/cancel their own request.
      allow delete: if request.auth != null && request.auth.token.dispensaryId == resource.data.requesterDispensaryId;
    }

    // ============== STRAIN DATA ==============
    match /my-seeded-collection/{strainId} {
      // Anyone can read the strain data.
      allow read: if true;
      // No one can write to it from the client. It's seeded data.
      allow write: if false; 
    }

    // ============== CREDIT PACKAGES ==============
    match /creditPackages/{packageId} {
      // Anyone can view active credit packages.
      allow read: if true;
      // Only Super Admins can create or modify credit packages.
      allow write: if request.auth != null && request.auth.token.role == 'Super Admin';
    }
    
    // ============== AI INTERACTION LOGS ==============
    match /aiInteractionsLog/{logId} {
      // Users can only read their own logs. Super Admins can read all logs.
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.token.role == 'Super Admin');
      // The Cloud Function will be creating these documents, not clients directly.
      // But we can allow creation by the user if needed for direct client logging.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Logs are immutable from the client.
      allow update, delete: if false;
    }
    
     // ============== STICKER SETS ==============
    match /stickersets/{setId} {
      // Anyone can view public sticker sets. The creator can view their own.
      allow get: if resource.data.isPublic == true || (request.auth != null && request.auth.uid == resource.data.creatorUid);
      allow list: if true;
      // Only the creator can create or update their own sticker set.
      allow create, update: if request.auth != null && request.auth.uid == request.resource.data.creatorUid;
      // Only the creator or a Super Admin can delete a sticker set.
      allow delete: if request.auth != null && (request.auth.uid == resource.data.creatorUid || request.auth.token.role == 'Super Admin');
    }
  }
}
