rules_version = '2';

// NOTE: THIS FILE IS THE SINGLE SOURCE OF TRUTH FOR FIRESTORE SECURITY.
// ALL OTHER RULES ARE OVERRIDDEN BY THE GLOBAL SUPER ADMIN RULE.

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================================================================
    // Helper Functions
    // ==================================================================
    
    // Checks if the requesting user is a Super Admin via custom claims.
    // This is the most secure and efficient way to check for admin privileges.
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    // Checks if the user is the owner of a given document.
    function isOwner(userId) {
      return request.auth.token.uid == userId;
    }
    
    // Checks if a user is an owner or staff of a specific dispensary.
    function isDispensaryMember(dispensaryId) {
        return request.auth.token.dispensaryId == dispensaryId;
    }
    
    // ==================================================================
    // Global Read/Write Access Rules
    // ==================================================================
    
    // SUPER ADMIN OVERRIDE:
    // If a user is a Super Admin, they can read and write ANY document
    // in the entire database. This rule is checked first and provides
    // a "master key" for all administrative actions. No other rule
    // can block a Super Admin if this is true.
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }
    
    // ==================================================================
    // Collection-Specific Rules (for non-admins)
    // ==================================================================
    
    match /users/{userId} {
      // Any authenticated user can create their own user document.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can only read and update their own document.
      allow read, update: if isOwner(userId);
      // No one can delete a user document from the client.
      allow delete: if false;
    }
    
    match /dispensaries/{dispensaryId} {
      // Anyone can submit a new dispensary application.
      allow create: if request.auth != null;
      // Public can read approved dispensaries. Owners can read their own.
      allow read: if resource.data.status == 'Approved' || isDispensaryMember(dispensaryId);
      // Owners can update their own dispensary, but CANNOT change the status.
      // Status changes are reserved for Super Admins (handled by the global rule).
      allow update: if isDispensaryMember(dispensaryId) && request.resource.data.status == resource.data.status;
      // No client-side deletes for dispensaries.
      allow delete: if false;
    }

    match /products/{productId} {
        // Only a member of the dispensary that owns the product can create/update/delete it.
        allow create, update, delete: if isDispensaryMember(request.resource.data.dispensaryId);
        // Anyone can read any product.
        allow read: if true;
    }
    
    match /productRequests/{requestId} {
        // Authenticated users can read and write requests.
        // More specific logic (e.g., only involved parties) can be added here if needed.
        allow read, write: if request.auth != null;
    }

    match /poolIssues/{issueId} {
        // Authenticated users can read and write issues.
        allow read, write: if request.auth != null;
    }

    match /notifications/{notificationId} {
        // Only the recipient can read, update (mark as read), or delete their own notification.
        allow read, update, delete: if isOwner(resource.data.recipientUid);
        // Any authenticated user can create a notification (e.g., by triggering a function).
        allow create: if request.auth != null;
    }
    
    match /aiInteractionsLog/{logId} {
      // Only the user who owns the log can read it.
      allow read: if isOwner(resource.data.userId);
      // Only backend functions can create logs.
      allow write: if false;
    }
    
    match /creditPackages/{packageId} {
        // Anyone can read active credit packages.
        allow read: if resource.data.isActive == true;
        // Only admins can create/update/delete packages.
        allow write: if false; // Handled by global admin rule
    }

    match /dispensaryTypes/{typeId} {
      // Anyone can read dispensary types.
      allow read: if true;
      // Only admins can change types.
      allow write: if false; // Handled by global admin rule
    }
    
     match /stickersets/{setId} {
      // Anyone can read public sticker sets
      allow read: if resource.data.isPublic == true;
      // Users can only create/update/delete their own sets
      allow create, update, delete: if isOwner(request.resource.data.creatorUid);
    }
    
    // Deny all access to log collections from the client.
    match /scrapeLogs/{logId} {
      allow read, write: if false;
    }
     match /importsHistory/{historyId} {
      allow read, write: if false;
    }
  }
}
