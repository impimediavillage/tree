rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(doc) {
      return request.auth.uid == doc.data.uid;
    }

    // Helper function to check if the user belongs to the dispensary of the document
    function isDispensaryMember(dispensaryId) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId == dispensaryId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isRole('Super Admin');
      allow write: if request.auth.uid == userId || isRole('Super Admin');
      // Allow create for any authenticated user during signup
      allow create: if request.auth != null;
    }

    // Dispensaries Collection
    match /dispensaries/{dispensaryId} {
      // Allow read for Super Admins and for owners/staff of that specific dispensary
      allow read: if isRole('Super Admin') || isDispensaryMember(dispensaryId);
      // Public read for approved dispensaries
      allow list: if request.query.where.status == 'Approved';
      allow create, update, delete: if isRole('Super Admin');
    }

    // Dispensary Types Collection (Publicly readable, admin-only write)
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isRole('Super Admin');
    }
    
    // Dispensary Type Product Categories (Admin-only)
    match /dispensaryTypeProductCategories/{docId} {
        allow read, write: if isRole('Super Admin');
    }

    // Products Collection
    match /products/{productId} {
      // Public can read any product
      allow read: if true;
      // Only members of the product's dispensary can create, update, or delete it.
      allow write: if isDispensaryMember(resource.data.dispensaryId);
    }
    
    // Product Requests Collection
    match /productRequests/{requestId} {
       // A user can read a request if they are the requester OR the owner of the product being requested. Super Admins can read all.
       allow read: if isRole('Super Admin') || 
                    isDispensaryMember(resource.data.requesterDispensaryId) || 
                    isDispensaryMember(resource.data.productOwnerDispensaryId);
      
       // Allow create if the user is the requester.
       allow create: if isDispensaryMember(request.resource.data.requesterDispensaryId);

       // Allow update if the user is the requester, owner, or a Super Admin.
       allow update: if isRole('Super Admin') || 
                      isDispensaryMember(resource.data.requesterDispensaryId) || 
                      isDispensaryMember(resource.data.productOwnerDispensaryId);
      
       // Only Super Admins can delete.
       allow delete: if isRole('Super Admin');
    }

    // StickerSets Collection
    match /stickersets/{setId} {
      // Anyone can read public sticker sets
      allow read: if resource.data.isPublic == true;
      // Only the creator can read their own private sets
      allow get: if isOwner(resource);
      // Only the creator can create, update, or delete their own sets
      allow write: if isOwner(get(/databases/$(database)/documents/stickersets/$(setId)));
      allow create: if isOwner(request.resource);
    }
    
    // Other collections, admin-only for now
    match /poolIssues/{issueId} {
      allow read, write: if isRole('Super Admin') || isDispensaryMember(resource.data.reporterDispensaryId) || isDispensaryMember(resource.data.reportedDispensaryId);
    }
    match /creditPackages/{packageId} {
      allow read: if true; // Publicly readable
      allow write: if isRole('Super Admin');
    }
    match /aiInteractionsLog/{logId} {
      allow read, write: if isOwner(get(/databases/$(database)/documents/aiInteractionsLog/$(logId))) || isRole('Super Admin');
       allow create: if isOwner(request.resource);
    }
     match /importsHistory/{logId} {
      allow read, write: if isRole('Super Admin');
    }
    match /notifications/{notificationId} {
       allow read, write: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId))) || isRole('Super Admin');
       allow create: if request.auth != null;
    }
  }
}
