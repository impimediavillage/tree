rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is a Super Admin
    function isSuperAdmin() {
      return request.auth != null && request.auth.token.role == 'Super Admin';
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if a user is a staff member or owner of a dispensary
    function isDispensaryMember(dispensaryId) {
      return request.auth != null && request.auth.token.dispensaryId == dispensaryId;
    }

    // Helper function to get dispensary data
    function getDispensary(dispensaryId) {
      return get(/databases/$(database)/documents/dispensaries/$(dispensaryId)).data;
    }

    // Public read access for dispensary types
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Public read access for product categories
    match /dispensaryTypeProductCategories/{docId} {
        allow read: if request.auth != null; // Any authenticated user can read
        allow write: if isSuperAdmin();
    }
    
    // Dispensaries: Public can read approved, owner can read/update their own, admin can do anything.
    match /dispensaries/{dispensaryId} {
      allow read: if resource.data.status == 'Approved' || isOwner(resource.data.ownerId) || isSuperAdmin();
      allow create: if request.auth != null; // Let function handle validation
      allow update: if isOwner(resource.data.ownerId) || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // Users: Can read/update their own profile. Admins can read/update any.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isSuperAdmin();
      allow create: if request.auth != null; // Let function handle validation
    }
    
    // Products: Public can read. Owners can manage their own products. Admin can do anything.
    match /products/{productId} {
      allow read: if true;
      allow create: if isDispensaryMember(request.resource.data.dispensaryId);
      allow update: if isDispensaryMember(resource.data.dispensaryId);
      allow delete: if isDispensaryMember(resource.data.dispensaryId) || isSuperAdmin();
    }

    // Product Requests: Only involved parties can access.
    match /productRequests/{requestId} {
      allow read, update: if isDispensaryMember(resource.data.requesterDispensaryId) || isDispensaryMember(resource.data.productOwnerDispensaryId) || isSuperAdmin();
      allow create: if isDispensaryMember(request.resource.data.requesterDispensaryId);
    }
    
    // Notifications: Only recipient can read/update.
    match /notifications/{notificationId} {
        allow read, update, delete: if isOwner(resource.data.recipientUid) || isSuperAdmin();
        allow create: if request.auth != null; // Functions create notifications
    }

    // Pool Issues: Read by involved parties or admin.
    match /poolIssues/{issueId} {
      allow read, update: if isDispensaryMember(resource.data.reporterDispensaryId) || isDispensaryMember(resource.data.reportedDispensaryId) || isSuperAdmin();
      allow create: if isDispensaryMember(request.resource.data.reporterDispensaryId);
    }
    
    // Credit Packages: Public read for active packages. Admin write.
    match /creditPackages/{packageId} {
        allow read: if resource.data.isActive == true || isSuperAdmin();
        allow write: if isSuperAdmin();
    }

    // AI Interaction Logs: Only user or admin can read their logs. Only functions can create.
    match /aiInteractionsLog/{logId} {
        allow read: if isOwner(resource.data.userId) || isSuperAdmin();
        allow create: if request.auth != null;
    }
    
    // Sticker Sets: Public can read. Owner can manage.
    match /stickersets/{setId} {
        allow read: if resource.data.isPublic == true || isOwner(resource.data.creatorUid) || isSuperAdmin();
        allow create: if isOwner(request.resource.data.creatorUid);
        allow update, delete: if isOwner(resource.data.creatorUid) || isSuperAdmin();
    }

    // Seed data, development logs, etc.
    match /my-seeded-collection/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Or restrict to admin if needed
    }
    
    match /justbrand_catalog/{doc=**} {
        allow read: if isSuperAdmin();
        allow write: if isSuperAdmin();
    }

    match /scrapeLogs/{logId} {
        allow read: if isSuperAdmin();
        allow write: if isSuperAdmin();
    }

    match /importsHistory/{logId} {
        allow read: if isSuperAdmin();
        allow write: if isSuperAdmin();
    }
  }
}
