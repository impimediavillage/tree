
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to improve readability
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    function isDispensaryOwner() {
      return request.auth.token.role == 'DispensaryOwner';
    }

    function isDispensaryStaff() {
      return request.auth.token.role == 'DispensaryStaff';
    }

    function isOwnerOrStaff(dispensaryId) {
      return request.auth.token.dispensaryId == dispensaryId && (isDispensaryOwner() || isDispensaryStaff());
    }

    function isOwner(dispensaryId) {
       return request.auth.token.dispensaryId == dispensaryId && isDispensaryOwner();
    }
    
    function isSelf(userId) {
      return request.auth.uid == userId;
    }

    // Collection: users
    match /users/{userId} {
      allow read: if isSuperAdmin() || isSelf(userId) || isOwner(resource.data.dispensaryId);
      allow create: if isSelf(userId) || isSuperAdmin();
      allow update: if isSuperAdmin() || isSelf(userId) || isOwner(resource.data.dispensaryId);
      allow delete: if isSuperAdmin();
    }

    // Collection Group: For querying users by dispensary
    match /{path=**}/users/{userId} {
      allow list: if isSuperAdmin() || isOwner(request.query.where.dispensaryId);
    }
    
    // Collection: dispensaries
    match /dispensaries/{dispensaryId} {
      // Anyone can read an approved dispensary's public profile
      allow get: if resource.data.status == 'Approved';
      // Logged-in users can browse approved dispensaries
      allow list: if request.auth != null;
      
      // Owners can update their own dispensary, Super Admins can update any
      allow update: if isOwner(dispensaryId) || isSuperAdmin();
      allow create, delete: if isSuperAdmin();
    }

    // Collection: dispensaryTypes (Publicly readable)
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // Collection: dispensaryTypeProductCategories (Publicly readable)
    match /dispensaryTypeProductCategories/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // Collection: products
    match /products/{productId} {
      // Anyone can read products of an approved dispensary
      allow get: if true; 
      // Allow querying products by dispensaryId (client-side filters for status)
      allow list: if request.auth != null; 
      
      // Only staff/owner of the dispensary can write to their products
      allow create, update: if isOwnerOrStaff(request.resource.data.dispensaryId);
      allow delete: if isOwnerOrStaff(resource.data.dispensaryId);
    }

    // Collection: productRequests
    match /productRequests/{requestId} {
      allow get, list: if isSuperAdmin() || isOwnerOrStaff(request.auth.token.dispensaryId);
      allow create: if request.auth != null; // Anyone logged in can create a request
      allow update: if isOwnerOrStaff(resource.data.productOwnerDispensaryId) || isOwnerOrStaff(resource.data.requesterDispensaryId);
      allow delete: if isSuperAdmin();
    }
    
    // Collection: poolIssues
    match /poolIssues/{issueId} {
      allow read, write: if isSuperAdmin();
      allow create: if request.auth != null;
    }

    // Collection: aiInteractionsLog
    match /aiInteractionsLog/{logId} {
      allow read: if isSuperAdmin() || isSelf(request.auth.uid);
      allow list: if isSuperAdmin() || (isOwner(request.query.where.dispensaryId));
      allow create: if isSelf(request.resource.data.userId);
      allow update, delete: if false; // Logs should be immutable
    }

    // Collection: creditPackages (public read for active, admin write)
    match /creditPackages/{packageId} {
      allow get: if resource.data.isActive == true;
      allow list: if request.auth != null;
      allow write: if isSuperAdmin();
    }
    
    // Collection: stickersets
    match /stickersets/{stickerId} {
      // Public sets are readable by anyone
      allow get: if resource.data.isPublic == true;
      // Allow browsing public sets
      allow list: if request.auth != null;
      
      // Only the creator can update/delete their own sets
      allow create: if isSelf(request.resource.data.creatorUid);
      allow update, delete: if isSelf(resource.data.creatorUid);
    }
    
    // Collection: importsHistory (Super Admin only)
    match /importsHistory/{importId} {
      allow read, write: if isSuperAdmin();
    }

  }
}
