rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ======== HELPER FUNCTIONS ========
    function isSuperAdmin() {
      // Check for the custom claim 'role' on the user's auth token.
      // This is the most secure and efficient way to check for admin status.
      return request.auth.token.role == 'Super Admin';
    }

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // ======== GLOBAL ADMIN OVERRIDE ========
    // This rule grants Super Admins unconditional read/write access to the entire database.
    // It is checked first and acts as a master key.
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }

    // ======== COLLECTION-SPECIFIC RULES (FOR NON-ADMINS) ========

    // Dispensaries: Public can only read approved ones. Owner can update their own.
    match /dispensaries/{dispensaryId} {
      allow read: if resource.data.status == 'Approved';
      allow create: if isSignedIn(); // An owner creates this via the signup form
      // An owner can update their own data, but NOT the status field.
      allow update: if isOwner(resource.data.ownerEmail) && request.resource.data.status == resource.data.status;
    }

    // Publicly readable utility collections
    match /dispensaryTypes/{typeId} {
      allow read: if true;
    }
    match /dispensaryTypeProductCategories/{docId} {
      allow read: if true;
    }
    match /creditPackages/{packageId} {
      allow read: if true;
    }

    // Products: Publicly readable, writable only by the dispensary owner.
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId == request.resource.data.dispensaryId;
    }
    
    // StickerSets: Publicly readable, only creator can manage.
    match /stickersets/{setId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.creatorUid);
    }
    
    // Users: Can only be read/updated by themselves.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if true; // Allows public signup
    }

    // Product Requests: Only involved parties can interact.
    match /productRequests/{requestId} {
      allow read, update: if isSignedIn() && (isOwner(resource.data.requesterId) || isOwner(resource.data.productOwnerId));
      allow create: if isSignedIn();
    }
    
    // Pool Issues: Only involved parties or admins can see/interact.
    match /poolIssues/{issueId} {
      allow read, update: if isSignedIn() && (isOwner(resource.data.reporterId) || isOwner(resource.data.reportedPartyId));
      allow create: if isSignedIn();
    }
    
    // Interaction Logs: Only the user who created them can read.
    match /aiInteractionsLog/{logId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }

    // Notifications: Only the recipient can read.
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.recipientUid);
      // No public creation allowed
    }
    
    // Read-only seed/static data
    match /my-seeded-collection/{strainId} {
        allow read: if true;
    }
     match /justbrand_catalog/{docId} {
      allow read: if true;
    }
     match /justbrand_catalog/{docId}/{subcollection}/{productId} {
      allow read: if true;
    }
  }
}
