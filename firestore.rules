
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for Super Admin role from the auth token
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an owner of the specified dispensary
    function isDispensaryOwner(dispensaryId) {
        return request.auth.token.role == 'DispensaryOwner' && request.auth.token.dispensaryId == dispensaryId;
    }
    
    // Helper function to check if the user is staff of the specified dispensary
    function isDispensaryStaff(dispensaryId) {
        return request.auth.token.role == 'DispensaryStaff' && request.auth.token.dispensaryId == dispensaryId;
    }
    
    // Public read for dispensaries, types, and products
    match /dispensaries/{dispensaryId} {
      allow read: if true;
      allow write: if isSuperAdmin() || isDispensaryOwner(dispensaryId);
    }
    
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isSuperAdmin() || isDispensaryOwner(resource.data.dispensaryId);
    }

    // Users can read/write their own user document. Super Admins can read/write any.
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
      allow list: if isSuperAdmin();
    }
    
    // Dispensary owners can manage their own staff and linked leaf users
    match /users/{userId} {
        allow read, write: if isSuperAdmin() || (isDispensaryOwner(resource.data.dispensaryId) && resource.data.dispensaryId == request.auth.token.dispensaryId);
    }

    // Notifications: Only the recipient can read/write their own notifications.
    match /notifications/{notificationId} {
      allow read, write, delete: if isSuperAdmin() || get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientUid == request.auth.uid;
      allow list: if isSuperAdmin() || (request.auth.uid != null); // Logged-in users can list their own
    }
    
    // Product Requests: Requester, Owner, and Super Admin have access
    match /productRequests/{requestId} {
      allow read, write: if isSuperAdmin() || 
                           isDispensaryOwner(resource.data.requesterDispensaryId) || 
                           isDispensaryOwner(resource.data.productOwnerDispensaryId);
      allow create: if request.auth != null; // Any authenticated user can create
    }
    
    // Pool Issues: Requester, Reported Party, and Super Admin have access
    match /poolIssues/{issueId} {
      allow read, write: if isSuperAdmin() || 
                           isDispensaryOwner(resource.data.reporterDispensaryId) || 
                           isDispensaryOwner(resource.data.reportedDispensaryId);
      allow create: if request.auth != null;
    }

    // Credit packages can be read by anyone, but only managed by Super Admin
    match /creditPackages/{packageId} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }

    // AI Interaction Logs: Only the user or Super Admin can access
    match /aiInteractionsLog/{logId} {
        allow read: if isSuperAdmin() || resource.data.userId == request.auth.uid;
        allow create: if request.auth != null;
    }
    
    // Seed data and other potentially public collections
    match /my-seeded-collection/{strainId} {
        allow read: if true;
        allow write: if request.auth != null; // Allow authenticated writes for image updates
    }
    
    match /justbrand_catalog/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
      match /products/{productId} {
        allow read: if true;
        allow write: if isSuperAdmin();
      }
    }
    
    // Sticker sets
    match /stickersets/{setId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isSuperAdmin() || resource.data.creatorUid == request.auth.uid;
    }

    // Scrape Logs and History should be admin-only
    match /{collectionId}/{docId} {
      allow read, write, list: if isSuperAdmin() && (collectionId == 'scrapeLogs' || collectionId == 'importsHistory');
    }
  }
}
