rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Super Admin role
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super Admin';
    }

    // Helper function to check for Dispensary Owner/Staff role
    function isDispensaryAdmin(userId) {
      let userRole = get(/databases/$(database)/documents/users/$(userId)).data.role;
      return userRole == 'DispensaryOwner' || userRole == 'DispensaryStaff';
    }

    // Helper function to get the dispensaryId from a user's profile
    function getUserDispensaryId(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.dispensaryId;
    }

    // =================================
    //  Public Collections
    // =================================

    // Anyone can read approved dispensaries and their types
    match /dispensaries/{dispensaryId} {
      allow read: if resource.data.status == 'Approved';
      allow list: if resource.data.status == 'Approved'; // Redundant with read but explicit
      
      // Only super admin can write
      allow write: if isSuperAdmin();
    }

    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // =================================
    //  Authenticated Collections
    // =================================
    
    match /users/{userId} {
      // Allow user to read/write their own document
      allow read, update: if request.auth.uid == userId || isSuperAdmin();
      // Only super admin can create or delete user documents directly
      allow create, delete: if isSuperAdmin();
      // Dispensary Owners can list users associated with their dispensary
      allow list: if isDispensaryAdmin(request.auth.uid) && getUserDispensaryId(request.auth.uid) == request.query.where.dispensaryId || isSuperAdmin();
    }

    match /products/{productId} {
      // ANYONE can read a product. The UI will handle showing the correct products.
      allow read: if true;

      // WRITES (create, update, delete) are protected.
      // You must be a Super Admin OR your token's dispensaryId must match the product's dispensaryId.
      allow write: if isSuperAdmin() || 
                     (request.auth.token.dispensaryId != null && request.resource.data.dispensaryId == request.auth.token.dispensaryId);
      
      // For querying/listing products.
      // A dispensary admin must be querying for THEIR OWN products.
      // This is the key rule that fixes the "permission denied" on the product list page.
      allow list: if isSuperAdmin() || 
                    (request.auth.token.dispensaryId != null && request.query.where.dispensaryId == request.auth.token.dispensaryId);
    }

    match /productRequests/{requestId} {
      allow read, write: if request.auth != null; // Simplified for now, can be tightened later if needed.
    }
    
    match /poolIssues/{issueId} {
        allow read, write: if isSuperAdmin();
    }
    
    match /creditPackages/{packageId} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }
    
    match /aiInteractionsLog/{logId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.uid == resource.data.userId || isSuperAdmin();
    }

    match /stickersets/{stickerId} {
        allow read: if true;
        allow create, update: if request.auth != null && request.resource.data.creatorUid == request.auth.uid;
        allow delete: if request.auth != null && get(/databases/$(database)/documents/stickersets/$(stickerId)).data.creatorUid == request.auth.uid || isSuperAdmin();
    }
  }
}
