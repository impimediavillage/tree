
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions for validating user roles and ownership.
    // These rely on custom claims set in the user's auth token.

    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    // Checks if the user is the owner of a specific dispensary.
    function isDispensaryOwner(dispensaryId) {
      return request.auth.token.dispensaryId == dispensaryId;
    }
    
    // Checks if a user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // Super Admins can read/write any user document.
      // Any authenticated user can read/write their OWN document.
      allow read, write: if isSuperAdmin() || request.auth.uid == userId;
    }
    
    // Rules for the 'dispensaryTypes' collection.
    match /dispensaryTypes/{typeId} {
        // Anyone can read the types of dispensaries.
        allow read: if true;
        // Only Super Admins can create, update, or delete types.
        allow write: if isSuperAdmin();
    }
    
    // Rules for the 'dispensaryTypeProductCategories' collection
    match /dispensaryTypeProductCategories/{docId} {
        // Anyone can read product category structures.
        allow read: if true;
        // Only Super Admins can manage these structures.
        allow write: if isSuperAdmin();
    }

    // Rules for the 'dispensaries' collection.
    match /dispensaries/{dispensaryId} {
      // Anyone can read an 'Approved' dispensary's profile.
      allow read: if resource.data.status == 'Approved';

      // Rules for creating, updating, and deleting dispensaries.
      // Creating is handled by a public signup form (no auth required for create).
      allow create: if true; 
      
      // Updating/Deleting requires being the owner or a Super Admin.
      allow update, delete: if isDispensaryOwner(dispensaryId) || isSuperAdmin();
    }

    // Rules for the 'products' collection.
    match /products/{productId} {
      // Anyone can read any product document.
      allow read: if true;
      
      // To create a product, the dispensaryId in the new product data
      // MUST match the dispensaryId in the user's auth token, OR the user must be a Super Admin.
      allow create: if isDispensaryOwner(request.resource.data.dispensaryId) || isSuperAdmin();

      // To update/delete, the user must be the owner of the dispensary
      // that this product belongs to, OR a Super Admin.
      allow update, delete: if isDispensaryOwner(resource.data.dispensaryId) || isSuperAdmin();
    }

    // Rules for the 'productRequests' collection.
    match /productRequests/{requestId} {
      // Only the requester, the owner, or a Super Admin can read a request.
      allow read: if isDispensaryOwner(resource.data.requesterDispensaryId) || isDispensaryOwner(resource.data.productOwnerDispensaryId) || isSuperAdmin();
      
      // Only the requester can create a request.
      allow create: if isDispensaryOwner(request.resource.data.requesterDispensaryId) || isSuperAdmin();

      // Only the involved parties or a Super Admin can update it.
      allow update: if isDispensaryOwner(resource.data.requesterDispensaryId) || isDispensaryOwner(resource.data.productOwnerDispensaryId) || isSuperAdmin();

      // Deleting requests is disallowed for data integrity.
      allow delete: if false;
    }
    
    // Rules for 'poolIssues' collection
    match /poolIssues/{issueId} {
      // Only Super Admins can read or write pool issues.
      allow read, write: if isSuperAdmin();
    }

    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
      // A user can only access their own notifications.
      // Super Admins can read any notification for debugging/moderation.
      allow get: if resource.data.recipientUid == request.auth.uid || isSuperAdmin();
      allow list: if isSuperAdmin(); // Only super admins can list all notifications
      // Notifications are created by backend functions, not directly by clients.
      allow create, update, delete: if false;
    }
    
    // Rules for 'aiInteractionsLog' collection
    match /aiInteractionsLog/{logId} {
        // A user can read their own logs.
        allow read: if isSuperAdmin() || resource.data.userId == request.auth.uid;
        // Logs are created by backend functions only.
        allow create: if false;
        allow update, delete: if isSuperAdmin();
    }
    
    // Rules for 'creditPackages' collection
    match /creditPackages/{packageId} {
        // Anyone can read available credit packages.
        allow read: if true;
        // Only Super Admins can create, update, or delete them.
        allow write: if isSuperAdmin();
    }
    
    // Rules for 'stickersets' collection
    match /stickersets/{setId} {
        // Anyone can read a public sticker set.
        // The creator or a Super Admin can read any set.
        allow read: if resource.data.isPublic == true || resource.data.creatorUid == request.auth.uid || isSuperAdmin();
        
        // Only an authenticated user can create a sticker set for themselves.
        allow create: if request.resource.data.creatorUid == request.auth.uid;

        // Only the creator or a Super Admin can update/delete it.
        allow update, delete: if resource.data.creatorUid == request.auth.uid || isSuperAdmin();
    }
    
    // Rules for scraping logs and history. Only Super Admins can access.
    match /scrapeLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }

    match /importsHistory/{historyId} {
      allow read, write: if isSuperAdmin();
    }
    
    // Rules for the JustBrand catalog data (read-only for clients).
    match /justbrand_catalog/{doc=**} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }

    // Deny all access to the seeded strain collection from the client-side.
    // It should only be accessed by backend functions.
    match /my-seeded-collection/{doc=**} {
      allow read, write: if false;
    }
  }
}
