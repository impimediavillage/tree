rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Super Admin role
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super Admin';
    }

    // Helper function to check for Dispensary Owner/Staff role
    function isDispensaryAdmin(dispensaryId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return (userDoc.role == 'DispensaryOwner' || userDoc.role == 'DispensaryStaff') && userDoc.dispensaryId == dispensaryId;
    }

    // Users Collection
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isSuperAdmin();
      allow create, delete: if isSuperAdmin();
      allow list: if isSuperAdmin();
    }

    // Dispensaries Collection
    match /dispensaries/{dispensaryId} {
      // Public can read approved dispensaries, admins can read their own
      allow read: if resource.data.status == 'Approved' || isDispensaryAdmin(dispensaryId) || isSuperAdmin();
      // Only Super Admins can create new dispensaries from the backend
      allow create: if isSuperAdmin();
      // Dispensary admins can update their own profile, Super Admins can update any
      allow update: if isDispensaryAdmin(dispensaryId) || isSuperAdmin();
      // Only Super Admins can delete
      allow delete: if isSuperAdmin();
      // Public can list approved dispensaries
      allow list: if true; // Let client-side queries handle filtering by status
    }

    // Products Collection
    match /products/{productId} {
      // Anyone can read any product (for public storefronts)
      allow read: if true;
      // Allow list for authenticated users (client queries will filter by dispensaryId)
      allow list: if request.auth != null;
      // Allow write only if user is an admin of that dispensary or a Super Admin
      allow write: if isDispensaryAdmin(request.resource.data.dispensaryId) || isSuperAdmin();
    }

    // Dispensary Types Collection
    match /dispensaryTypes/{typeId} {
      // Anyone can read and list all dispensary types
      allow read, list: if true;
      // Only Super Admins can create, update, or delete types
      allow write: if isSuperAdmin();
    }
    
    // Dispensary Type Product Categories Collection
    match /dispensaryTypeProductCategories/{docId} {
       allow read, list: if true;
       allow write: if isSuperAdmin();
    }

    // Product Requests Collection (for pool)
    match /productRequests/{requestId} {
      allow read: if isDispensaryAdmin(resource.data.requesterDispensaryId) || isDispensaryAdmin(resource.data.productOwnerDispensaryId) || isSuperAdmin();
      allow create: if isDispensaryAdmin(request.resource.data.requesterDispensaryId) || isSuperAdmin();
      allow update: if isDispensaryAdmin(resource.data.requesterDispensaryId) || isDispensaryAdmin(resource.data.productOwnerDispensaryId) || isSuperAdmin();
      allow list: if request.auth != null; // Authenticated users can list, queries must be specific
    }
    
    // StickerSets Collection
    match /stickersets/{stickerId} {
      allow read, list: if true; // Publicly readable
      allow create, update: if request.auth != null && (request.resource.data.creatorUid == request.auth.uid || isSuperAdmin());
      allow delete: if request.auth != null && (resource.data.creatorUid == request.auth.uid || isSuperAdmin());
    }
    
    // AI Interactions Log
    match /aiInteractionsLog/{logId} {
      allow read, list: if request.auth != null && (resource.data.userId == request.auth.uid || isDispensaryAdmin(resource.data.dispensaryId) || isSuperAdmin());
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Credit Packages
    match /creditPackages/{packageId} {
      allow read, list: if true; // Public can see packages
      allow write: if isSuperAdmin(); // Only super admin can manage
    }
    
     // Pool Issues
    match /poolIssues/{issueId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if isSuperAdmin();
    }
    
    // Fallback security rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
