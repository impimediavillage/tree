rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check for Super Admin role
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    // Helper function to check for Dispensary Owner role
    function isDispensaryOwner(dispensaryId) {
      return request.auth.token.role == 'DispensaryOwner' && request.auth.token.dispensaryId == dispensaryId;
    }

    // Helper function to check for Dispensary Staff
    function isDispensaryStaff(dispensaryId) {
        return request.auth.token.role == 'DispensaryStaff' && request.auth.token.dispensaryId == dispensaryId;
    }

    // Helper function to check for any authenticated user
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // PUBLIC ACCESS: Dispensary applications can be created by anyone.
    match /dispensaries/{dispensaryId} {
      allow create; // Anyone can submit an application
      // Super Admins can manage all dispensaries
      allow read, update, delete: if isSuperAdmin();
      // An owner can read their own dispensary document
      allow get: if isAuthenticated() && isDispensaryOwner(dispensaryId);
    }
    
    // PUBLIC ACCESS: Anyone can see the available dispensary types.
    match /dispensaryTypes/{typeId} {
        allow read; // Public read access
        allow write: if isSuperAdmin(); // Only super admins can manage types
    }
    
    // PUBLIC ACCESS: Anyone can see credit packages.
    match /creditPackages/{packageId} {
      allow read;
      allow write: if isSuperAdmin();
    }
    
    // PUBLIC ACCESS: Anyone can read public sticker sets
    match /stickersets/{setId} {
        allow get: if resource.data.isPublic == true;
        allow list: if request.query.where.isPublic == true;
        allow read, write, delete: if isSuperAdmin();
        allow create, update: if isAuthenticated() && request.resource.data.creatorUid == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.creatorUid == request.auth.uid;
    }
    
    // PUBLIC ACCESS: Public read access for category definitions for all users to build forms
     match /dispensaryTypeProductCategories/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Users can only read/update their own document, except Super Admins
    match /users/{userId} {
      allow create; // Anyone can create their user document during signup
      allow read, update: if request.auth.uid == userId || isSuperAdmin();
      allow list, delete: if isSuperAdmin();
    }
    
    // Products can be read by anyone if the dispensary is approved.
    // Products can only be written by the owner/staff of the linked dispensary or a Super Admin.
    match /products/{productId} {
      allow read: if get(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)).data.status == 'Approved';
      allow create: if isAuthenticated() && (isDispensaryOwner(request.resource.data.dispensaryId) || isDispensaryStaff(request.resource.data.dispensaryId) || isSuperAdmin());
      allow update, delete: if isAuthenticated() && (isDispensaryOwner(resource.data.dispensaryId) || isDispensaryStaff(resource.data.dispensaryId) || isSuperAdmin());
      allow list: if isSuperAdmin(); // Super admin can list all products
    }
    
    // For all other collections, grant full access to Super Admins.
    // This simplifies rules for admin-only collections like logs, issues, etc.
    match /{path=**} {
      allow read, write: if isSuperAdmin();
    }

    // Fallback rule for notifications, specific to the user.
     match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && (isSuperAdmin() || request.auth.uid == resource.data.recipientUid);
    }
  }
}
