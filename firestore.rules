rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    function isDispensaryOwner(dispensaryId) {
      return request.auth.token.role == 'DispensaryOwner' && request.auth.token.dispensaryId == dispensaryId;
    }
    
    function isOwnerOfDispensaryDoc(dispensaryId) {
        return request.auth.uid == get(/databases/$(database)/documents/dispensaries/$(dispensaryId)).data.ownerId;
    }

    functionisSignedIn() {
      return request.auth != null;
    }

    // Collection: users
    match /users/{userId} {
      // A user can create their own profile.
      // Any user can be created by a Super Admin.
      allow create: if isSignedIn() || isSuperAdmin();

      // A user can read their own data.
      // A Super Admin can read any user's data.
      // A Dispensary Owner can read data of users linked to their dispensary.
      allow read: if request.auth.uid == userId 
                  || isSuperAdmin() 
                  || (isDispensaryOwner(resource.data.dispensaryId));

      // A user can update their own data.
      // A Super Admin can update any user's data.
      // A Dispensary Owner can update users linked to their dispensary, but cannot change their role to admin/owner.
      allow update: if request.auth.uid == userId 
                    || isSuperAdmin()
                    || (isDispensaryOwner(resource.data.dispensaryId) && !(request.resource.data.role in ['Super Admin', 'DispensaryOwner']));
      
      // Only a Super Admin can delete a user document.
      allow delete: if isSuperAdmin();
    }
    
    // Collection: dispensaries
    match /dispensaries/{dispensaryId} {
        // Anyone can create a dispensary (application).
        allow create: if true;
        
        // Anyone can read an approved dispensary.
        // The owner of the dispensary can read it regardless of status.
        // Super Admins can read any dispensary.
        allow read: if resource.data.status == 'Approved' 
                    || (isSignedIn() && isOwnerOfDispensaryDoc(dispensaryId)) 
                    || isSuperAdmin();
        
        // Only Super Admins can update a dispensary document.
        // A Dispensary Owner can update their own document.
        allow update: if isSuperAdmin() || (isSignedIn() && isOwnerOfDispensaryDoc(dispensaryId));
        
        // Only Super Admins can delete a dispensary.
        allow delete: if isSuperAdmin();
    }

    // Collection: dispensaryTypes
    match /dispensaryTypes/{typeId} {
        // Anyone can read dispensary types.
        allow read: if true;
        // Only Super Admins can create, update, or delete types.
        allow write: if isSuperAdmin();
    }
    
    // Collection: dispensaryTypeProductCategories
    match /dispensaryTypeProductCategories/{docId} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }

    // Collection: products
    match /products/{productId} {
        // Anyone can read a product from an approved dispensary.
        allow read: if get(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)).data.status == 'Approved';
        
        // Only a dispensary owner can create, update, or delete their own products.
        allow create, update, delete: if isDispensaryOwner(request.resource.data.dispensaryId);
    }
    
    // Collection: productRequests
    match /productRequests/{requestId} {
        // Only involved parties (owner/requester) or a Super Admin can read a request.
        allow read: if isSuperAdmin() 
                    || isDispensaryOwner(resource.data.productOwnerDispensaryId) 
                    || isDispensaryOwner(resource.data.requesterDispensaryId);
                    
        // The requester's owner can create a request.
        allow create: if isDispensaryOwner(request.resource.data.requesterDispensaryId);
        
        // An involved party can update the request (e.g., add notes, change status).
        allow update: if isDispensaryOwner(resource.data.productOwnerDispensaryId) 
                      || isDispensaryOwner(resource.data.requesterDispensaryId);
        
        // Only a Super Admin can delete a request.
        allow delete: if isSuperAdmin();
    }

    // Collection: poolIssues
    match /poolIssues/{issueId} {
        // Only involved parties or Super Admins can read issues.
        allow read: if isSuperAdmin() 
                    || isDispensaryOwner(resource.data.reporterDispensaryId) 
                    || isDispensaryOwner(resource.data.reportedDispensaryId);
                    
        // The reporter can create an issue.
        allow create: if isDispensaryOwner(request.resource.data.reporterDispensaryId);
        
        // Only a Super Admin can update (resolve/close) an issue.
        allow update: if isSuperAdmin();
        
        // Only a Super Admin can delete an issue.
        allow delete: if isSuperAdmin();
    }
    
    // Collection: notifications
    match /notifications/{notificationId} {
        // A user can read and delete their own notifications.
        allow read, delete: if isSignedIn() && request.auth.uid == resource.data.recipientUid;
        // Notifications are created by backend functions only.
        allow create, update: if false;
    }
    
    // Collection: creditPackages
    match /creditPackages/{packageId} {
        // Anyone can read active credit packages.
        allow read: if resource.data.isActive == true;
        // Only Super Admins can create, update, or delete packages.
        allow write: if isSuperAdmin();
    }
    
    // Collection: aiInteractionsLog
    match /aiInteractionsLog/{logId} {
        // Users can read their own logs. Super Admins can read all.
        allow read: if isSignedIn() && request.auth.uid == resource.data.userId || isSuperAdmin();
        // Logs are created by backend functions only.
        allow write: if false;
    }
    
    // Collection: my-seeded-collection (for strain data)
    match /my-seeded-collection/{strainId} {
        // All authenticated users can read from the strain database.
        allow read: if isSignedIn();
        // Callable function will handle secure updates.
        allow write: if isSignedIn(); 
    }
    
    // Collection: stickersets
    match /stickersets/{setId} {
        // Public can view sets marked as public.
        // Creator can view their own sets regardless of public status.
        allow read: if resource.data.isPublic == true 
                    || (isSignedIn() && resource.data.creatorUid == request.auth.uid);
        // Any authenticated user can create a set.
        allow create: if isSignedIn();
        // Only the creator can update or delete their own set.
        allow update, delete: if isSignedIn() && resource.data.creatorUid == request.auth.uid;
    }
  }
}
