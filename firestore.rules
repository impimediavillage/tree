rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(docId) {
      return request.auth != null && request.auth.uid == docId;
    }

    function isDispensaryOwner(dispensaryId) {
      // Checks if the user's auth token has a claim matching the dispensary ID.
      // This is the most secure way to verify ownership for write operations.
      return request.auth != null && request.auth.token.dispensaryId == dispensaryId;
    }
    
    // Collection Rules
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId);
    }

    match /dispensaries/{dispensaryId} {
      allow create: if true; // Anyone can submit an application
      
      // Allow read if the dispensary is approved OR the user is the owner of this dispensary
      allow read: if resource.data.status == 'Approved' || isDispensaryOwner(dispensaryId);
      
      // Allow write (update/delete) only if the user is the designated owner.
      allow update, delete: if isDispensaryOwner(dispensaryId);
    }
    
    match /dispensaryTypeProductCategories/{docId} {
      // Allow any authenticated user to read category structures needed for forms.
      allow read: if request.auth != null;
    }

    match /products/{productId} {
      // Anyone can view products
      allow read: if true;

      // Allow create only if the dispensaryId in the NEW product data
      // matches the dispensaryId claim in the user's auth token.
      allow create: if request.auth != null && request.resource.data.dispensaryId == request.auth.token.dispensaryId;

      // Allow update/delete only if the user owns the existing product.
      allow update, delete: if request.auth != null && request.auth.token.dispensaryId == resource.data.dispensaryId;
    }
    
    match /productRequests/{requestId} {
      allow read, write: if request.auth != null; // Simplified for now, can be tightened later if needed.
    }
    
    match /poolIssues/{issueId} {
      allow read, write: if request.auth != null; // Simplified for now.
    }

    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.recipientUid;
    }

    match /creditPackages/{packageId} {
      allow read: if true;
    }

    match /aiInteractionsLog/{logId} {
      // Users should only be able to create their own logs, and maybe read them.
      // For simplicity, we'll allow authenticated writes.
      allow read, write: if request.auth != null;
    }
    
    match /my-seeded-collection/{strainId} {
      // Seed data should be readable by authenticated users
      allow read: if request.auth != null;
      // Allow an authenticated function/user to update the image URL
      allow update: if request.auth != null;
    }
    
    match /stickersets/{stickerId} {
      allow read: if resource.data.isPublic == true;
      allow create: if request.auth.uid == request.resource.data.creatorUid;
      allow update, delete: if request.auth.uid == resource.data.creatorUid;
    }

    // Explicitly deny writes to collections not covered above, for security.
    match /{document=**} {
      allow write: if false;
    }
  }
}
