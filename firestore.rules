
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user's role from a custom claim
    // Assumes you are setting a 'role' custom claim on user authentication
    function getUserRole() {
      return request.auth.token.role;
    }

    // Helper function to check if a user is a Super Admin
    function isSuperAdmin() {
      return isAuthenticated() && getUserRole() == 'Super Admin';
    }

    // Helper function to check if a user is a Dispensary Owner
    function isDispensaryOwner() {
      return isAuthenticated() && getUserRole() == 'DispensaryOwner';
    }
    
    // Helper function to check if the request is coming from the owner of the specific dispensary document
    function isOwnerOfDispensary(dispensaryId) {
      // Ensure request.auth.token.dispensaryId exists before comparing
      return isDispensaryOwner() && request.auth.token.dispensaryId != null && request.auth.token.dispensaryId == dispensaryId;
    }

    // Helper function to check if a user is the owner of the user document being accessed
    function isSelf(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // General Users collection
    match /users/{userId} {
      // Allow users to read and update their own profile
      // Super Admins can read/write any user profile
      allow read, update: if isSelf(userId) || isSuperAdmin();
      // Allow authenticated users to create their own user document (e.g., on signup)
      // Also allow SuperAdmins to create users (e.g. from admin panel)
      allow create: if (isAuthenticated() && request.auth.uid == userId) || isSuperAdmin();
      // Super Admins can delete users (use with caution)
      allow delete: if isSuperAdmin();
    }

    // Dispensaries collection
    match /dispensaries/{dispensaryId} {
      // Public can read approved dispensaries. Super Admins can read any dispensary.
      allow read: if (resource.data.status == 'Approved') || isSuperAdmin(); 
      
      // Authenticated users can create new dispensary applications (status will be 'Pending Approval')
      allow create: if isAuthenticated() && request.resource.data.status == 'Pending Approval';
      
      // Only the owner of the dispensary or a Super Admin can update it
      allow update: if isOwnerOfDispensary(dispensaryId) || isSuperAdmin();
      
      // Only Super Admins can delete dispensaries (use with caution)
      allow delete: if isSuperAdmin();
    }

    // Dispensary Types collection
    match /dispensaryTypes/{typeId} {
      // Anyone can read dispensary types (e.g., to populate dropdowns)
      allow read: if true;
      // Only Super Admins can create, update, or delete dispensary types
      allow write: if isSuperAdmin(); // Covers create, update, delete
    }

    // Products collection
    match /products/{productId} {
      // Public can read products (assuming they belong to an approved dispensary)
      // For more robust security, you might want to check the status of the linked dispensary
      // This simple rule allows any read for now.
      allow read: if true; 
      
      // Helper function to check if the product belongs to the requesting owner's dispensary
      function isProductOwner() {
        return isDispensaryOwner() && 
               request.auth.token.dispensaryId != null && 
               request.auth.token.dispensaryId == request.resource.data.dispensaryId;
      }
      // Helper function for delete, checking existing resource
      function wasProductOwner() {
        return isDispensaryOwner() && 
               request.auth.token.dispensaryId != null && 
               request.auth.token.dispensaryId == resource.data.dispensaryId;
      }
      
      allow create: if isProductOwner() || isSuperAdmin(); 
      allow update: if isProductOwner() || isSuperAdmin(); 
      allow delete: if wasProductOwner() || isSuperAdmin(); 
    }

    // Product Requests collection
    match /productRequests/{requestId} {
      // Involved parties (requester or product owner) or Super Admin can read
      allow read: if (isAuthenticated() && (request.auth.token.dispensaryId == resource.data.requesterDispensaryId || request.auth.token.dispensaryId == resource.data.productOwnerDispensaryId)) || isSuperAdmin();
      
      // Requester dispensary owner can create a request
      allow create: if isAuthenticated() && request.auth.token.dispensaryId != null && request.auth.token.dispensaryId == request.resource.data.requesterDispensaryId;
      
      // Involved parties or Super Admin can update (e.g., status, add notes)
      allow update: if (isAuthenticated() && (request.auth.token.dispensaryId == resource.data.requesterDispensaryId || request.auth.token.dispensaryId == resource.data.productOwnerDispensaryId)) || isSuperAdmin();
      
      // Super Admin or original requester (if pending) can delete
      allow delete: if (isAuthenticated() && request.auth.token.dispensaryId != null && request.auth.token.dispensaryId == resource.data.requesterDispensaryId && resource.data.requestStatus == 'pending_owner_approval') || isSuperAdmin();
    }

    // Pool Issues collection
    match /poolIssues/{issueId} {
      // Involved parties or Super Admin can read
      allow read: if (isAuthenticated() && (request.auth.token.dispensaryId == resource.data.reporterDispensaryId || request.auth.token.dispensaryId == resource.data.reportedDispensaryId)) || isSuperAdmin();
      
      // Authenticated dispensary owners can create an issue
      allow create: if isDispensaryOwner() && request.auth.token.dispensaryId != null && request.auth.token.dispensaryId == request.resource.data.reporterDispensaryId;
      
      // Only Super Admins can update (e.g., status, resolution)
      allow update: if isSuperAdmin();
      
      // Only Super Admins can delete issues
      allow delete: if isSuperAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Only the recipient or a Super Admin can read/update (e.g., mark as read)
      allow read, update: if (isAuthenticated() && request.auth.uid == resource.data.recipientUid) || isSuperAdmin();
      // Notifications are typically created by backend functions, not directly by clients, but Super Admin could.
      allow create: if isSuperAdmin(); 
      allow delete: if isSuperAdmin();
    }

    // AI Interaction Logs collection
    match /aiInteractionsLog/{logId} {
      // User can read their own logs. Super Admin can read all.
      allow read: if (isAuthenticated() && request.auth.uid == resource.data.userId) || isSuperAdmin();
      // Logs are created by a backend function (deductCreditsAndLogInteraction)
      // Allow if authenticated (function will verify user) OR if Super Admin (e.g., manual adjustment/test)
      allow create: if isAuthenticated() || isSuperAdmin(); 
      // No updates/deletes by client typically, only Super Admin
      allow update, delete: if isSuperAdmin();
    }

    // Credit Packages collection
    match /creditPackages/{packageId} {
      // Anyone can read active credit packages
      // Super Admins can read all packages (even inactive ones)
      allow read: if (resource.data.isActive == true) || isSuperAdmin();
      
      // Only Super Admins can create, update, or delete credit packages
      allow write: if isSuperAdmin(); // Covers create, update, delete
    }
  }
}
