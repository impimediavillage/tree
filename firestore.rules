
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.role == 'Super Admin';
    }

    function isDispensaryOwner() {
      return isSignedIn() && request.auth.token.role == 'DispensaryOwner';
    }

    function isOwnerOfDispensary(dispensaryId) {
      // Check for null dispensaryId on token to prevent errors
      return isDispensaryOwner() && request.auth.token.dispensaryId != null && request.auth.token.dispensaryId == dispensaryId;
    }

    function isLeafUser() {
      return isSignedIn() && (request.auth.token.role == 'LeafUser' || request.auth.token.role == 'User');
    }
    
    function isDispensaryStaff(dispensaryId) {
      return isSignedIn() && request.auth.token.role == 'DispensaryStaff' && request.auth.token.dispensaryId != null && request.auth.token.dispensaryId == dispensaryId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isSignedIn() && (isUser(userId) || isSuperAdmin());
      allow list: if isSuperAdmin(); // SuperAdmins can list all users
      allow create: if isSuperAdmin() || (request.auth.uid == userId && !isSuperAdmin() && !isDispensaryOwner());
      allow update: if (isUser(userId) && !('role' in request.resource.data && request.resource.data.role != resource.data.role)) || isSuperAdmin();
      allow delete: if isSuperAdmin(); 
    }

    // Dispensaries Collection
    match /dispensaries/{dispensaryId} {
      allow read: if (resource.data.status == 'Approved') || isSuperAdmin() || isOwnerOfDispensary(dispensaryId);
      allow list: if isSuperAdmin(); // SuperAdmins can list all dispensaries
      allow create: if (isSignedIn() && request.resource.data.ownerEmail == request.auth.token.email) || isSuperAdmin();
      allow update: if isOwnerOfDispensary(dispensaryId) || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // DispensaryTypes Collection
    match /dispensaryTypes/{typeId} {
      allow read: if true; 
      allow list: if true; // Types are public to list
      allow create, update, delete: if isSuperAdmin();
    }
    
    // CreditPackages Collection
    match /creditPackages/{packageId} {
      allow read: if true;
      allow list: if true; // Credit packages are public to list
      allow create, update, delete: if isSuperAdmin();
    }

    // Products Collection
    match /products/{productId} {
      allow read: if true; 
      allow list: if isSuperAdmin() || isDispensaryOwner(); // Owners can list their products, Admin can list all
      allow create, update: if isOwnerOfDispensary(request.resource.data.dispensaryId) || isSuperAdmin();
      allow delete: if isOwnerOfDispensary(resource.data.dispensaryId) || isSuperAdmin();
    }

    // ProductRequests Collection
    match /productRequests/{requestId} {
      // Users involved (requester or owner) or SuperAdmins can read.
      allow read: if isSignedIn() && 
                     ( (resource.data.requesterDispensaryId != null && isOwnerOfDispensary(resource.data.requesterDispensaryId)) ||
                       (resource.data.productOwnerDispensaryId != null && isOwnerOfDispensary(resource.data.productOwnerDispensaryId)) ||
                       isSuperAdmin() );
      // Owners can list requests they are part of. SuperAdmin lists all.
      // Client must filter for specific dispensary if owner is listing.
      allow list: if isSuperAdmin() || isDispensaryOwner();
      allow create: if isSignedIn() && (request.resource.data.requesterDispensaryId != null && isOwnerOfDispensary(request.resource.data.requesterDispensaryId));
      // Update: involved parties can update, super admin can update.
      allow update: if isSignedIn() && 
                     ( (resource.data.requesterDispensaryId != null && isOwnerOfDispensary(resource.data.requesterDispensaryId)) || 
                       (resource.data.productOwnerDispensaryId != null && isOwnerOfDispensary(resource.data.productOwnerDispensaryId)) ||
                       isSuperAdmin() );
      allow delete: if isSuperAdmin(); 
    }

    // PoolIssues Collection
    match /poolIssues/{issueId} {
      allow read: if isSignedIn() && 
                     ( (resource.data.reporterDispensaryId != null && isOwnerOfDispensary(resource.data.reporterDispensaryId)) ||
                       (resource.data.reportedDispensaryId != null && isOwnerOfDispensary(resource.data.reportedDispensaryId)) ||
                       isSuperAdmin() );
      allow list: if isSuperAdmin(); // Only SuperAdmins list all pool issues
      allow create: if isSignedIn() && (request.resource.data.reporterDispensaryId != null && isOwnerOfDispensary(request.resource.data.reporterDispensaryId));
      allow update, delete: if isSuperAdmin();
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
        allow read, update: if isSignedIn() && request.auth.uid == resource.data.recipientUid;
        // Users list their own notifications via client-side query `where('recipientUid', '==', currentUser.uid)`
        allow list: if isSignedIn(); 
        allow create: if isSuperAdmin(); 
        allow delete: if isSignedIn() && request.auth.uid == resource.data.recipientUid;
    }

    // AIInteractionsLog Collection
    match /aiInteractionsLog/{logId} {
        allow read: if isSuperAdmin() || (isSignedIn() && request.auth.uid == resource.data.userId);
        allow list: if isSuperAdmin(); // Only super admin can list all logs
        // Creation is handled by a callable function which runs with admin privileges or checks user identity.
        // Direct client creation rule can be restrictive or match callable function logic.
        allow create: if (isSignedIn() && request.auth.uid == request.resource.data.userId) || isSuperAdmin(); 
        allow update, delete: if isSuperAdmin();
    }
  }
}
