
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user belongs to a specific dispensary
    function isDispensaryMember(dispensaryId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId == dispensaryId;
    }
    
    // Helper function to check if the user is a super admin
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super Admin';
    }

    // Secure access to the users collection
    match /users/{userId} {
      // A user can read/write their own document
      allow read, update: if request.auth.uid == userId;
      // Super Admins can read/update any user document
      allow read, update: if isSuperAdmin();
      // Any authenticated user can create their own user document (on signup)
      allow create: if request.auth.uid == userId;
      // Listing users is restricted to Super Admins
      allow list: if isSuperAdmin();
    }

    // Secure access to dispensaries collection
    match /dispensaries/{dispensaryId} {
        // Anyone can read a dispensary profile (for public store pages)
        allow read: if true;
        // Only Super Admins can list, create, update, or delete dispensaries
        allow list, create, update, delete: if isSuperAdmin();
    }
    
    // Secure access to dispensaryTypes collection
    match /dispensaryTypes/{typeId} {
        // Publicly readable by anyone
        allow read, list: if true;
        // Only Super Admins can create, update, or delete types
        allow create, update, delete: if isSuperAdmin();
    }

    // Secure access to dispensaryTypeProductCategories
    match /dispensaryTypeProductCategories/{docId} {
      // Readable by any authenticated user (needed for Add Product form)
      allow read, list: if request.auth != null;
      // Writable only by Super Admins
      allow create, update, delete: if isSuperAdmin();
    }
    
    // Secure access to products collection
    match /products/{productId} {
      // Anyone can read a product document (for public store pages)
      allow read: if true;
      
      // A query for products is allowed ONLY if it filters by dispensaryId.
      // This is the key rule that fixes the permission denied error for list views.
      // We check that the queried dispensaryId matches the one in the user's secure auth token.
      allow list: if request.auth.token.dispensaryId == request.query.where.dispensaryId;

      // Users can create, update, or delete products for their own dispensary
      allow create, update, delete: if request.auth.token.dispensaryId == request.resource.data.dispensaryId;
    }

    // Secure access to product requests
    match /productRequests/{requestId} {
      // Read is allowed if the user is part of either the requesting or owning dispensary
      allow read: if isDispensaryMember(resource.data.requesterDispensaryId) || isDispensaryMember(resource.data.productOwnerDispensaryId);
      
      // Queries are allowed if they are for either incoming or outgoing requests for the user's dispensary
      allow list: if request.query.where.requesterDispensaryId == request.auth.token.dispensaryId ||
                     request.query.where.productOwnerDispensaryId == request.auth.token.dispensaryId;
      
      // Create is allowed if the user is the requester
      allow create: if isDispensaryMember(request.resource.data.requesterDispensaryId);

      // Update is allowed if the user is part of either dispensary
      allow update: if isDispensaryMember(resource.data.requesterDispensaryId) || isDispensaryMember(resource.data.productOwnerDispensaryId);
    }
    
    // Secure access to poolIssues
    match /poolIssues/{issueId} {
        // Only Super Admins can read, list, and update issues
        allow read, list, update: if isSuperAdmin();
        // A dispensary member can create an issue
        allow create: if isDispensaryMember(request.resource.data.reporterDispensaryId);
    }

    // Secure access to AI interaction logs
    match /aiInteractionsLog/{logId} {
        // A user can read their own logs
        allow read: if request.auth.uid == resource.data.userId || isSuperAdmin();
        // A user can create logs for themselves
        allow create: if request.auth.uid == request.resource.data.userId;
        // Admins can list logs by user or dispensary
        allow list: if isSuperAdmin() || 
                     (request.auth.token.dispensaryId != null && request.auth.token.dispensaryId == request.query.where.dispensaryId);
    }

    // Secure access to credit packages
    match /creditPackages/{packageId} {
        // Publicly readable and listable by any authenticated user
        allow read, list: if request.auth != null;
        // Only Super Admins can manage credit packages
        allow create, update, delete: if isSuperAdmin();
    }
    
    // Secure access to sticker sets
    match /stickersets/{setId} {
        // Publicly readable if the set is marked as public
        allow read: if resource.data.isPublic == true;
        // Users can create sets for themselves
        allow create: if request.auth.uid == request.resource.data.creatorUid;
        // Users can update or delete their own sets, or admins can manage any set
        allow update, delete: if request.auth.uid == resource.data.creatorUid || isSuperAdmin();
        // Allow listing of public sets, and allow users to list their own sets
        allow list: if request.query.where.isPublic == true ||
                     (request.auth.uid != null && request.query.where.creatorUid == request.auth.uid);
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
