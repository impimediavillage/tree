rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.role == 'Super Admin';
    }

    function isDispensaryOwner(dispensaryId) {
      return isSignedIn() && request.auth.token.role == 'DispensaryOwner' && request.auth.token.dispensaryId == dispensaryId;
    }
    
    function isOwnerOfDispensary(dispensaryId) {
        return exists(/databases/$(database)/documents/dispensaries/$(dispensaryId)) &&
               get(/databases/$(database)/documents/dispensaries/$(dispensaryId)).data.ownerEmail == request.auth.token.email;
    }
    
    function isDispensaryStaff(dispensaryId) {
        return isSignedIn() && request.auth.token.role == 'DispensaryStaff' && request.auth.token.dispensaryId == dispensaryId;
    }

    function isOwnerOrStaff(dispensaryId) {
        return isDispensaryOwner(dispensaryId) || isDispensaryStaff(dispensaryId);
    }
    
    function isSelf(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    // Collection: dispensaries
    match /dispensaries/{dispensaryId} {
      // Super Admin: Full access
      allow read, write: if isSuperAdmin();

      // Public: Read approved dispensaries
      allow get: if resource.data.status == 'Approved';

      // Public: Anyone can apply for a new dispensary
      allow create: if true; 
      
      // Dispensary Owner: Can update their own dispensary
      allow update: if isDispensaryOwner(dispensaryId);
    }
    
    match /dispensaryTypes/{typeId} {
        // Super Admin: Full access
        allow read, write: if isSuperAdmin();
        // Public/Users: Read access
        allow get, list: if true;
    }
    
    match /dispensaryTypeProductCategories/{docId} {
        // Super Admin: Full access
        allow read, write: if isSuperAdmin();
        // Owners/Staff: Read access to configure their products
        allow get, list: if isSignedIn();
    }

    // Collection: users
    match /users/{userId} {
        // Super Admin: Full access
        allow read, write: if isSuperAdmin();
        
        // Self: Can read/update own profile
        allow get, update: if isSelf(userId);
        
        // Dispensary Owner: Can read their staff/linked leaf users
        allow get: if isSignedIn() && request.auth.token.role == 'DispensaryOwner' && resource.data.dispensaryId == request.auth.token.dispensaryId;
    }

    // Collection: products
    match /products/{productId} {
        // Super Admin: Full access
        allow read, write: if isSuperAdmin();
        
        // Public: Read products from approved dispensaries
        allow get: if exists(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)) &&
                     get(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)).data.status == 'Approved';
                     
        // Dispensary Owner/Staff: Full control over their own products
        allow create, update, delete: if isOwnerOrStaff(request.resource.data.dispensaryId);
    }

    // Collection: productRequests
    match /productRequests/{requestId} {
        // Super Admin: Full access
        allow read, write: if isSuperAdmin();
        
        // Involved Parties: Can read/update their requests
        allow get, update: if isOwnerOrStaff(resource.data.productOwnerDispensaryId) || isOwnerOrStaff(resource.data.requesterDispensaryId);
        
        // Requesting store: Can create a request
        allow create: if isOwnerOrStaff(request.resource.data.requesterDispensaryId);
    }
    
    // Collection: poolIssues
    match /poolIssues/{issueId} {
        // Super Admin: Full access
        allow read, write: if isSuperAdmin();
        
        // Involved Parties: Read access
        allow get: if isOwnerOrStaff(resource.data.reporterDispensaryId) || isOwnerOrStaff(resource.data.reportedDispensaryId);
        
        // Reporting store: Can create an issue
        allow create: if isOwnerOrStaff(request.resource.data.reporterDispensaryId);
    }
    
    // Collection: notifications
    match /notifications/{notificationId} {
        // Super Admin: Read all
        allow get, list: if isSuperAdmin();
        
        // Recipient only: Can read/update their own notifications
        allow get, update: if isSelf(resource.data.recipientUid);
    }

    // Collection: creditPackages
    match /creditPackages/{packageId} {
        // Super Admin: Full control
        allow read, write: if isSuperAdmin();
        
        // All users: Can read active packages
        allow get, list: if isSignedIn() && resource.data.isActive == true;
    }
    
     // Collection: aiInteractionsLog
    match /aiInteractionsLog/{logId} {
      // Super Admin: read-only access for auditing
      allow get, list: if isSuperAdmin();
      // User can read their own logs
      allow get: if isSelf(resource.data.userId);
      // Backend function only can create
      allow create: if false; 
    }
    
    // Collection: scrapeLogs & importsHistory
    match /{logCollection}/{logId} {
      // Super Admin: Can read logs
      allow get, list: if isSuperAdmin() && (logCollection == 'scrapeLogs' || logCollection == 'importsHistory');
      // No one else can write/delete
      allow write, delete: if false;
    }
    
    // Seeded data is read-only for authenticated users
    match /my-seeded-collection/{strainId} {
       allow get, list: if isSignedIn();
       allow write: if isSuperAdmin(); // Super admin can manage seed data
    }
    
    match /justbrand_catalog/{catId} {
        allow get, list: if isSuperAdmin();
        allow write: if false; // Only function can write
    }
    
    match /justbrand_catalog/{catId}/products/{prodId} {
         allow get, list: if isSuperAdmin();
         allow write: if false; // Only function can write
    }
    
     match /stickersets/{setId} {
      // Super admin can manage all
      allow read, write: if isSuperAdmin();
      
      // Public can read public sets
      allow get: if resource.data.isPublic == true;
      
      // Creator can manage their own set
      allow create, update, delete: if isSelf(request.resource.data.creatorUid);
      allow get: if isSelf(resource.data.creatorUid);
    }

    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
