
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // PUBLIC ACCESS RULES
    match /dispensaryTypes/{typeId} {
      allow read: if true;
    }
    match /stickersets/{stickerId} {
      allow get: if resource.data.isPublic == true;
      allow list: if resource.data.isPublic == true;
    }

    // USER-SPECIFIC RULES
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }
    
    // AUTHENTICATED ACCESS
    match /products/{productId} {
        // Anyone authenticated can create a product
        allow create: if request.auth != null;
        // Only allow read/update/delete if the product belongs to the user's dispensary
        allow read, update, delete: if request.auth.token.dispensaryId != null && request.auth.token.dispensaryId == resource.data.dispensaryId;
    }

    match /stickersets/{stickerId} {
      allow create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.creatorUid;
    }

    match /aiInteractionsLog/{logId} {
      allow read, create: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /productRequests/{requestId} {
        allow read, write: if request.auth.token.dispensaryId != null && (request.auth.token.dispensaryId == resource.data.requesterDispensaryId || request.auth.token.dispensaryId == resource.data.productOwnerDispensaryId);
    }
    
    // SUPER ADMIN RULES (Default Deny - functions handle this logic)
    // Add specific admin rules if needed, e.g., for analytics collections
    match /dispensaries/{dispensaryId} {
        allow read: if resource.data.status == 'Approved';
        // Add more restrictive rules for write if needed, often handled by functions
    }
  }
}
