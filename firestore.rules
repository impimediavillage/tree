
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user has the 'Super Admin' role.
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super Admin';
    }

    // Helper function to check if the user is a specific dispensary owner or staff.
    function isDispensaryMember(dispensaryId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId == dispensaryId;
    }

    // Users can read their own data. Admins can read any user's data.
    // Users can update their own data.
    // Authenticated users can create a user document (for signup).
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isSuperAdmin());
      allow update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Dispensary data can be read publicly if 'Approved'.
    // Admins can manage all dispensaries.
    // The owner of a dispensary can update their own.
    match /dispensaries/{dispensaryId} {
      allow read: if resource.data.status == 'Approved' || isDispensaryMember(dispensaryId) || isSuperAdmin();
      allow create, delete: if isSuperAdmin();
      allow update: if isSuperAdmin() || isDispensaryMember(dispensaryId);
    }
    
    // Dispensary Types and Categories are public-read, admin-write.
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    match /dispensaryTypeProductCategories/{docId} {
       allow read: if true;
       allow write: if isSuperAdmin();
    }

    // Products are publicly readable.
    // They can only be managed by a member of the dispensary that owns them.
    match /products/{productId} {
      allow read: if true;
      allow create: if isDispensaryMember(request.resource.data.dispensaryId);
      allow update, delete: if isDispensaryMember(resource.data.dispensaryId);
    }

    // Sticker sets are publicly readable.
    // Any authenticated user can create a sticker set for themselves.
    // Users can only update or delete their own sticker sets.
    match /stickersets/{stickerSetId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.creatorUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.creatorUid == request.auth.uid;
    }

    // AI interaction logs are private to the user or visible to an admin.
    match /aiInteractionsLog/{logId} {
      allow read, write: if request.auth != null && (request.auth.uid == resource.data.userId || isSuperAdmin());
      allow create: if request.auth != null;
    }

    // Product requests can be managed by participants or admins.
    match /productRequests/{requestId} {
       allow read, write: if isSuperAdmin() || 
                             isDispensaryMember(resource.data.productOwnerDispensaryId) ||
                             isDispensaryMember(resource.data.requesterDispensaryId);
    }
    
    // Pool issues are managed by admins only.
    match /poolIssues/{issueId} {
      allow read, write: if isSuperAdmin();
    }

    // Credit packages are public-read, admin-write.
    match /creditPackages/{packageId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // Catalogs are public-read, admin-write.
    match /justbrand_catalog/{docId}/{allPaths=**} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Scrape logs are admin-only.
    match /scrapeLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    match /importsHistory/{historyId} {
      allow read, write: if isSuperAdmin();
    }

    // Notifications are private to the recipient.
    match /notifications/{notificationId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.recipientUid;
    }
  }
}

    