rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default-deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow users to read their own user document
    match /users/{userId} {
      allow get: if request.auth != null && request.auth.uid == userId;
      // Allow super admins to read/write any user document
      allow read, write: if request.auth != null && request.auth.token.role == 'Super Admin';
      
      // Allow dispensary owners to list their own staff/linked users
      allow list: if request.auth != null && request.auth.token.dispensaryId == request.query.where.dispensaryId;
    }

    // Allow Super Admins to manage the dispensaries collection
    match /dispensaries/{dispensaryId} {
        allow read, list, write, delete: if request.auth != null && request.auth.token.role == 'Super Admin';
        // Allow the dispensary owner/staff to read their own dispensary doc
        allow get: if request.auth != null && request.auth.token.dispensaryId == dispensaryId;
    }
    
    // Products can be read by anyone (for public store pages) but only written by the correct dispensary members.
    // List queries are secured by the client always including a `where('dispensaryId', '==', id)` clause.
    match /products/{productId} {
        allow get, list: if true; // Public read access for storefronts
        allow write, delete: if request.auth != null && request.auth.token.dispensaryId == request.resource.data.dispensaryId;
    }

    match /dispensaryTypes/{typeId} {
      // Allow anyone to read/list dispensary types
      allow get, list: if true;
      // Only Super Admins can create, update, or delete them
      allow write: if request.auth != null && request.auth.token.role == 'Super Admin';
    }

    match /dispensaryTypeProductCategories/{docId} {
        // Public read for clients building product forms
        allow get, list: if true;
        // Only super admins can modify
        allow write: if request.auth != null && request.auth.token.role == 'Super Admin';
    }

    // Product requests can only be accessed by the involved parties or a super admin.
    match /productRequests/{requestId} {
      allow read, write, list: if request.auth != null && 
        (request.auth.token.dispensaryId == resource.data.productOwnerDispensaryId ||
         request.auth.token.dispensaryId == resource.data.requesterDispensaryId ||
         request.auth.token.role == 'Super Admin');
    }

    // Pool issues are admin-only
    match /poolIssues/{issueId} {
        allow read, write, list, delete: if request.auth != null && request.auth.token.role == 'Super Admin';
    }

    // Interaction logs can only be read by the user who created them or an admin
    match /aiInteractionsLog/{logId} {
      allow read, list: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.token.role == 'Super Admin');
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Credit packages can be read by anyone but only managed by admins
    match /creditPackages/{packageId} {
        allow read, list: if true;
        allow write, delete: if request.auth != null && request.auth.token.role == 'Super Admin';
    }
    
    // Sticker sets can be read by anyone, but only written by their creator or an admin
    match /stickersets/{setId} {
        allow read, list: if true;
        allow create: if request.auth != null && request.resource.data.creatorUid == request.auth.uid;
        allow update, delete: if request.auth != null && 
            (get(/databases/$(database)/documents/stickersets/$(setId)).data.creatorUid == request.auth.uid ||
             request.auth.token.role == 'Super Admin');
    }
    
     // Seeded data collection should be readable by authenticated users
    match /my-seeded-collection/{itemId} {
      allow read, list: if request.auth != null;
      // Restrict write access to super admins for safety
      allow write: if request.auth != null && request.auth.token.role == 'Super Admin';
    }

    // Allow super admins to manage imports history
    match /importsHistory/{logId} {
       allow read, write: if request.auth != null && request.auth.token.role == 'Super Admin';
    }
  }
}
