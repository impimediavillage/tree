
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for Super Admin role.
    // This MUST be defined at this level to be accessible by the rules below.
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    // Global SUPER ADMIN OVERRIDE:
    // If the user is a Super Admin, grant them read/write access to EVERYTHING.
    // This rule is checked first and acts as a master key.
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }
    
    // --- Public & User-Specific Rules ---
    // These rules apply only if the user is NOT a Super Admin.

    // Users can only manage their own document.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Note: User creation is handled by backend Cloud Functions (onUserCreated).
    }
    
    // Dispensary Types can be read by anyone.
    match /dispensaryTypes/{typeId} {
        allow read: if true;
        // Write access is limited to Super Admin (handled by global rule).
    }

    // Products can be read by the public.
    // Write access is limited to the dispensary owner or Super Admin.
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.token.dispensaryId == resource.data.dispensaryId;
    }
    
    // Dispensaries can be read by the public only if they are approved.
    // Owners can read their own dispensary regardless of status.
    match /dispensaries/{dispensaryId} {
      allow read: if resource.data.status == 'Approved' || (request.auth != null && request.auth.token.dispensaryId == dispensaryId);
      // Write access is limited to Super Admin (handled by global rule).
    }
    
    // Notifications are private to the recipient.
    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.recipientUid;
      // Creation is handled by backend Cloud Functions.
    }
    
    // Cart items are private to the user.
    match /users/{userId}/cart/{cartItemId} {
       allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Product requests are visible to the requester and the product owner.
    match /productRequests/{requestId} {
      allow read, write: if request.auth != null && 
        (request.auth.token.dispensaryId == resource.data.requesterDispensaryId || request.auth.token.dispensaryId == resource.data.productOwnerDispensaryId);
    }
    
    // Pool Issues can only be read/written by admins (handled by global rule).
    match /poolIssues/{issueId} {
       allow read, write: if false; // Default deny
    }
    
    // Credit packages can be read by anyone.
    match /creditPackages/{packageId} {
        allow read: if true;
    }
    
    // AI interaction logs are private.
    match /aiInteractionsLog/{logId} {
        allow read: if request.auth != null && request.auth.uid == resource.data.userId;
        // Creation is handled by a backend Cloud Function.
    }
    
    // Sticker sets can be read by the public if they are public.
    // Write access is for the creator.
    match /stickersets/{setId} {
      allow read: if resource.data.isPublic == true;
      allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.creatorUid;
    }
  }
}
