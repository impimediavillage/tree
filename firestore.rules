rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================================================================
    // Helper Functions
    // ==================================================================
    function isSuperAdmin() {
      return request.auth != null && request.auth.token.role == 'Super Admin';
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isDispensaryMember(dispensaryId) {
      return isAuthenticated() && request.auth.token.dispensaryId == dispensaryId;
    }
    
    // ==================================================================
    // Collection-Specific Rules
    // ==================================================================
    
    match /users/{userId} {
      // READ: A user can read their own document. A Super Admin can read any.
      allow read: if isOwner(userId) || isSuperAdmin();
      // UPDATE: A user can update their own document. A Super Admin can update any.
      allow update: if isOwner(userId) || isSuperAdmin();
      // CREATE: Any authenticated user can create their own user document upon sign-up.
      allow create: if isOwner(userId);
      // DELETE: No one can delete a user document from the client.
      allow delete: if false;
    }
    
    match /dispensaries/{dispensaryId} {
      // READ: Anyone can read an Approved dispensary. A Super Admin or a member of that dispensary can read it regardless of status.
      allow read: if resource.data.status == 'Approved' || isSuperAdmin() || isDispensaryMember(dispensaryId);
      // CREATE: Any authenticated user can create a new dispensary application.
      allow create: if isAuthenticated();
      // UPDATE: A Super Admin can update anything. A dispensary member can update their own dispensary, but cannot change the status.
      allow update: if isSuperAdmin() || (isDispensaryMember(dispensaryId) && request.resource.data.status == resource.data.status);
      // DELETE: Only Super Admins can delete dispensaries (and only through a backend function, ideally). Client delete is blocked.
      allow delete: if isSuperAdmin();
    }

    match /products/{productId} {
      // READ: Anyone can read any product.
      allow read: if true;
      // CREATE, UPDATE, DELETE: Only a member of the dispensary that owns the product, or a Super Admin.
      allow create, update, delete: if isDispensaryMember(request.resource.data.dispensaryId) || isSuperAdmin();
    }
    
    match /productRequests/{requestId} {
      // READ, WRITE: Any authenticated user can manage requests.
      // More specific logic (e.g., only involved parties) should be added for production if needed.
      allow read, write: if isAuthenticated();
    }

    match /poolIssues/{issueId} {
      // READ, WRITE: Any authenticated user can manage issues.
      allow read, write: if isAuthenticated();
    }

    match /notifications/{notificationId} {
      // READ, UPDATE, DELETE: Only the recipient of the notification or a Super Admin.
      allow read, update, delete: if isOwner(resource.data.recipientUid) || isSuperAdmin();
      // CREATE: Any authenticated user can create a notification (e.g., by triggering a function).
      allow create: if isAuthenticated();
    }
    
    match /aiInteractionsLog/{logId} {
      // READ: Only the user who owns the log or a Super Admin.
      allow read: if isOwner(resource.data.userId) || isSuperAdmin();
      // WRITE: Only backend functions can create logs (client-side write is blocked).
      allow write: if false;
    }
    
    match /creditPackages/{packageId} {
      // READ: Anyone can read active credit packages. Super Admins can read all.
      allow read: if (resource.data.isActive == true) || isSuperAdmin();
      // WRITE: Only Super Admins can create/update/delete packages.
      allow write: if isSuperAdmin();
    }

    match /dispensaryTypes/{typeId} {
      // READ: Anyone can read dispensary types.
      allow read: if true;
      // WRITE: Only Super Admins can change types.
      allow write: if isSuperAdmin();
    }
    
    match /stickersets/{setId} {
      // READ: Anyone can read public sticker sets.
      allow read: if resource.data.isPublic == true;
      // CREATE, UPDATE, DELETE: Only the owner of the set or a Super Admin.
      allow create, update, delete: if isOwner(request.resource.data.creatorUid) || isSuperAdmin();
    }
    
    // Default deny for log collections from the client.
    match /scrapeLogs/{logId} {
      allow read, write: if false;
    }
    match /importsHistory/{historyId} {
      allow read, write: if false;
    }
  }
}
