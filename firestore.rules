
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for security rules
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.role == 'Super Admin';
    }

    function isDispensaryOwner(dispensaryId) {
      return isSignedIn() && request.auth.token.role == 'DispensaryOwner' && request.auth.token.dispensaryId == dispensaryId;
    }
    
    function isOwnerOfResource(resource) {
        return resource.data.dispensaryId == request.auth.token.dispensaryId;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Global catch-all: Super Admin has full access to everything.
    // This rule is checked first for any path.
    match /{path=**} {
      allow read, write: if isSuperAdmin();
    }

    // Dispensary Types: Public can read, only Super Admin can write (covered by global rule).
    match /dispensaryTypes/{typeId} {
      allow get: if true;
      allow list: if true;
      allow write: if isSuperAdmin(); // Explicitly stated for clarity, but covered by global rule.
    }
    
    // Dispensary Product Categories: Public can read, only Super Admin can write.
    match /dispensaryTypeProductCategories/{docId} {
        allow get: if true;
        allow list: if true;
        allow write: if isSuperAdmin();
    }

    // Dispensaries Collection
    match /dispensaries/{dispensaryId} {
      // Anyone can see an approved dispensary profile.
      allow get: if resource.data.status == 'Approved';
      // Anyone can list approved dispensaries.
      allow list: if true; // The query must filter for status == 'Approved' on the client-side for non-admins.
      // Anyone can create a new dispensary application (status must be 'Pending Approval').
      allow create: if request.resource.data.status == 'Pending Approval';
      // Only the assigned owner can update their own dispensary document.
      allow update: if isDispensaryOwner(dispensaryId);
      // Delete is restricted to Super Admin (covered by global rule).
      allow delete: if isSuperAdmin();
    }

    // Users Collection
    match /users/{userId} {
      // A user can read and update their own profile.
      allow get, update: if isUser(userId);
      // A dispensary owner can view/edit users linked to their dispensary.
      allow get, update: if isSignedIn() && request.auth.token.role == 'DispensaryOwner' && resource.data.dispensaryId == request.auth.token.dispensaryId;
      // Super Admin can do anything (covered by global rule).
      allow list, delete: if isSuperAdmin();
    }

    // Products Collection
    match /products/{productId} {
      // Anyone can see products from an approved dispensary.
      allow get: if get(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)).data.status == 'Approved';
      // Anyone can list products. Client must filter by approved dispensaries.
      allow list: if true;
      // Only the owner of a dispensary can create, update, or delete products for it.
      allow create, update, delete: if isDispensaryOwner(request.resource.data.dispensaryId);
    }
    
    // Product Requests Collection
    match /productRequests/{requestId} {
        // The requester OR the owner of the product can read/update the request.
        allow get, update: if isDispensaryOwner(resource.data.requesterDispensaryId) || isDispensaryOwner(resource.data.productOwnerDispensaryId);
        // Only a dispensary owner can create a request.
        allow create: if isDispensaryOwner(request.resource.data.requesterDispensaryId);
        // Delete restricted to Super Admin.
        allow delete: if isSuperAdmin();
    }
    
    // Pool Issues Collection
    match /poolIssues/{issueId} {
      // Only involved parties or Super Admin can read.
      allow get: if isDispensaryOwner(resource.data.reporterDispensaryId) || isDispensaryOwner(resource.data.reportedDispensaryId);
      // Only a dispensary owner can create an issue.
      allow create: if isDispensaryOwner(request.resource.data.reporterDispensaryId);
      // Update/Delete restricted to Super Admin.
      allow update, delete: if isSuperAdmin();
      allow list: if isSuperAdmin();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      // Users can only read notifications intended for them. No public list access.
      allow get, list: if isSignedIn() && resource.data.recipientUid == request.auth.uid;
      // Only server-side functions can create notifications.
      allow create, update, delete: if false;
    }
    
    // Credit Packages Collection
    match /creditPackages/{packageId} {
      // Anyone can read active credit packages.
      allow get, list: if true;
      // Only Super Admin can write.
      allow write: if isSuperAdmin();
    }
    
    // AI Interaction Logs
    match /aiInteractionsLog/{logId} {
        // Users can read their own logs.
        allow get, list: if isSignedIn() && resource.data.userId == request.auth.uid;
        // Only server-side functions can create.
        allow create: if false;
        allow update, delete: if isSuperAdmin();
    }
    
     // Sticker Sets Collection
    match /stickersets/{setId} {
      // Public read for sets marked as public
      allow get: if resource.data.isPublic == true;
      allow list: if true; // Client must filter for isPublic == true
      // Only the creator can create/update/delete their own sets
      allow create, update, delete: if isSignedIn() && request.resource.data.creatorUid == request.auth.uid;
    }

    // Seed Data and Scraper Logs
    match /my-seeded-collection/{docId} {
        allow read: if isSignedIn();
        allow write: if isSuperAdmin();
    }
    match /justbrand_catalog/{doc=**} {
        allow read: if isSuperAdmin();
        allow write: if isSuperAdmin();
    }
    match /scrapeLogs/{logId} {
        allow read: if isSuperAdmin();
        allow write: if false;
    }
    match /importsHistory/{logId} {
        allow read: if isSuperAdmin();
        allow write: if false;
    }
  }
}
