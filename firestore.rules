
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin of a specific dispensary
    function isDispensaryAdmin(dispensaryId) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      let userDispensaryId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId;
      return (userRole == 'DispensaryOwner' || userRole == 'DispensaryStaff') && userDispensaryId == dispensaryId;
    }

    // Helper function to check if a user is a Super Admin
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super Admin';
    }
    
    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Users can read their own profile, Super Admins can read any.
    // Dispensary owners can read profiles of users linked to their dispensary.
    match /users/{userId} {
      allow read: if isSignedIn() && 
                    (request.auth.uid == userId || 
                     isSuperAdmin() ||
                     (isDispensaryAdmin(get(/databases/$(database)/documents/users/$(userId)).data.dispensaryId)));
      allow write: if isSuperAdmin() || request.auth.uid == userId;
    }
    
    // Anyone can read dispensary types
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Anyone can read dispensaryTypeProductCategories
    match /dispensaryTypeProductCategories/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Dispensaries can be read by anyone if they are approved.
    // They can only be written to by their assigned owner/staff or a super admin.
    match /dispensaries/{dispensaryId} {
      allow read: if resource.data.status == 'Approved' || isDispensaryAdmin(dispensaryId) || isSuperAdmin();
      allow write: if isDispensaryAdmin(dispensaryId) || isSuperAdmin();
    }

    // Public users can view products.
    // Dispensary admins can manage their own products.
    // Super admins have full access.
    match /products/{productId} {
      allow read: if true;
      allow create: if isDispensaryAdmin(request.resource.data.dispensaryId) || isSuperAdmin();
      allow update, delete: if isDispensaryAdmin(resource.data.dispensaryId) || isSuperAdmin();
    }
    
    // Product Requests can be read/written by the involved parties or super admins.
    match /productRequests/{requestId} {
      allow read, write: if isSignedIn() && 
                         (isDispensaryAdmin(resource.data.productOwnerDispensaryId) ||
                          isDispensaryAdmin(resource.data.requesterDispensaryId) ||
                          isSuperAdmin());
    }

    // StickerSets can be read by anyone if public, but only written by their creator.
    match /stickersets/{setId} {
        allow read: if resource.data.isPublic == true;
        allow get: if true; // Allow direct gets even if private for creator
        allow write: if request.auth.uid == request.resource.data.creatorUid || isSuperAdmin();
        allow create: if request.auth.uid == request.resource.data.creatorUid;
    }
    
    // Credit packages are public to read, but only super admins can manage them.
    match /creditPackages/{packageId} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }

    // Logs are private and can only be managed by Super Admins, or created by functions.
    // Users can read their own interaction logs.
    match /aiInteractionsLog/{logId} {
      allow read: if request.auth.uid == resource.data.userId || isSuperAdmin();
      allow create: if isSignedIn(); // Log creation should be handled by trusted backend
      allow write: if isSuperAdmin();
    }
    
    match /poolIssues/{issueId} {
        allow read, write: if isSuperAdmin();
    }
    
     match /importsHistory/{logId} {
        allow read, write: if isSuperAdmin();
    }

  }
}
