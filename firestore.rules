rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSuperAdmin() {
      // A user is a super admin if their custom token claim 'role' is 'Super Admin'.
      return request.auth.token.role == 'Super Admin';
    }
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isDispensaryOwner(dispensaryId) {
        return isSignedIn() && getUserData().role == 'DispensaryOwner' && getUserData().dispensaryId == dispensaryId;
    }
    
    // Super Admins can do anything. This is a broad but effective rule for admin access.
    match /{path=**} {
      allow read, write: if isSuperAdmin();
    }
    
    // Dispensary Types are public to read.
    match /dispensaryTypes/{typeId} {
      allow get, list: if true;
    }
    
    // Dispensaries can be read by the public if approved, or by their owner anytime.
    match /dispensaries/{dispensaryId} {
      allow get: if resource.data.status == 'Approved' || isDispensaryOwner(dispensaryId);
      allow list: if true; // Client side must filter for 'Approved' status for public lists.
      allow update: if isDispensaryOwner(dispensaryId);
      // Create is handled by a cloud function (onDispensaryCreated) or Admin, not directly by users.
    }
    
    // Products can be read publicly if their dispensary is approved.
    // They can be managed by their owner.
    match /products/{productId} {
      allow get: if get(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)).data.status == 'Approved';
      allow list: if true; // Client filters by dispensaryId.
      allow create: if isDispensaryOwner(request.resource.data.dispensaryId);
      allow update, delete: if isDispensaryOwner(resource.data.dispensaryId);
    }
    
    // Users can manage their own profile.
    // Dispensary owners can view their staff.
    match /users/{userId} {
      allow get, update: if isOwner(userId);
      allow get: if isSignedIn() && getUserData().role == 'DispensaryOwner' && get(/databases/$(database)/documents/users/$(userId)).data.dispensaryId == getUserData().dispensaryId;
    }
    
    // Credit packages are public to view.
    match /creditPackages/{packageId} {
        allow get, list: if true;
    }

    // Product requests can be created by any signed-in user.
    // They can be read/updated by the involved parties.
    match /productRequests/{requestId} {
      allow create: if isSignedIn();
      allow get, update: if isSignedIn() && (
        getUserData().dispensaryId == resource.data.requesterDispensaryId ||
        getUserData().dispensaryId == resource.data.productOwnerDispensaryId
      );
    }
    
    // Pool issues can be created by any signed-in user.
    match /poolIssues/{issueId} {
      allow create: if isSignedIn();
    }
    
    // Notifications can be managed only by the recipient.
    match /notifications/{notificationId} {
      allow get, list, update, delete: if isOwner(resource.data.recipientUid);
    }
    
    // AI interaction logs can only be read by the user who created them.
    match /aiInteractionsLog/{logId} {
      allow get, list: if isOwner(resource.data.userId);
    }
  }
}
