
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    function isDispensaryOwner() {
      return request.auth.token.role == 'DispensaryOwner';
    }
    
    function isDispensaryStaff() {
      return request.auth.token.role == 'DispensaryStaff';
    }

    function isOwnerOrStaffOf(dispensaryId) {
      return request.auth.token.dispensaryId == dispensaryId;
    }

    // ============== USER PROFILES ==============
    match /users/{userId} {
      // A user can always read their own data.
      allow get: if request.auth.uid == userId;
      // A user can update their own profile, but cannot change their role or credits.
      allow update: if request.auth.uid == userId
                    && !('role' in request.resource.data)
                    && !('credits' in request.resource.data);
      // Only Super Admins can list, create, or delete users.
      allow list, create, delete: if isSuperAdmin();
    }
    
    // Super Admins can update any field on any user profile
    match /users/{userId} {
       allow update: if isSuperAdmin();
    }

    // ============== DISPENSARIES ==============
    match /dispensaries/{dispensaryId} {
      // Anyone can read an approved dispensary profile.
      allow get: if resource.data.status == 'Approved';
      // Only the assigned dispensary owner/staff can update their own dispensary.
      allow update: if isOwnerOrStaffOf(dispensaryId);
      // Super Admins can perform any action on dispensaries.
      allow read, write: if isSuperAdmin();
    }
    
    match /dispensaryTypes/{typeId} {
      // Anyone can read the types of dispensaries available.
      allow get, list: if true;
      // Only Super Admins can create, update, or delete types.
      allow write: if isSuperAdmin();
    }

    // ============== PRODUCTS ==============
    match /products/{productId} {
      // Anyone can read any product document.
      allow get, list: if true;
      // A product can only be created, updated, or deleted by the owner/staff of the dispensary it belongs to.
      allow write: if isOwnerOrStaffOf(request.resource.data.dispensaryId);
      // Super Admins can do anything.
      allow write: if isSuperAdmin();
    }

    // ============== PRODUCT REQUESTS (Pool) ==============
    match /productRequests/{requestId} {
      // You can read a request if you are the owner of the product OR the requester.
      allow get, list: if isOwnerOrStaffOf(resource.data.productOwnerDispensaryId) || isOwnerOrStaffOf(resource.data.requesterDispensaryId);
      // You can create a request if you are the requester.
      allow create: if isOwnerOrStaffOf(request.resource.data.requesterDispensaryId);
      // You can update a request if you are the owner or the requester.
      allow update: if isOwnerOrStaffOf(resource.data.productOwnerDispensaryId) || isOwnerOrStaffOf(resource.data.requesterDispensaryId);
      // Super Admins can do anything.
      allow read, write: if isSuperAdmin();
    }
    
    // ============== STICKER SETS ==============
    match /stickersets/{stickerId} {
      // Anyone can read a public sticker set.
      allow get: if resource.data.isPublic == true;
      allow list: if true; // Allow browsing lists
      // Only the creator can update or delete their own sticker set.
      allow write: if request.auth.uid == resource.data.creatorUid;
      // Super Admins can do anything.
      allow read, write: if isSuperAdmin();
    }
    
    // ============== LOGS & PACKAGES ==============
    match /aiInteractionsLog/{logId} {
      // Users can only read/create logs for themselves.
      allow read, create: if request.auth.uid == request.resource.data.userId;
      // Super Admins can read any log.
      allow read: if isSuperAdmin();
    }
    
    match /creditPackages/{packageId} {
      // Anyone can see the available credit packages.
      allow get, list: if true;
      // Only Super Admins can manage credit packages.
      allow write: if isSuperAdmin();
    }
  }
}
