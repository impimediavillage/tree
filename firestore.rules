
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.role == 'Super Admin';
    }

    function isDispensaryOwner(dispensaryId) {
      return isSignedIn() && request.auth.token.role == 'DispensaryOwner' && request.auth.token.dispensaryId == dispensaryId;
    }

    function isDispensaryStaff(dispensaryId) {
        return isSignedIn() && request.auth.token.role == 'DispensaryStaff' && request.auth.token.dispensaryId == dispensaryId;
    }
    
    function isOwnerOrStaffOfDispensary(dispensaryId) {
        return isDispensaryOwner(dispensaryId) || isDispensaryStaff(dispensaryId);
    }
    
    // PUBLIC COLLECTIONS
    match /dispensaryTypes/{typeId} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }
    
    match /dispensaryTypeProductCategories/{typeId} {
        allow read: if isSignedIn();
        allow write: if isSuperAdmin();
    }

    match /dispensaries/{dispensaryId} {
        // Public can read approved dispensaries, owners can read their own
        allow read: if resource.data.status == 'Approved' || isOwnerOrStaffOfDispensary(dispensaryId) || isSuperAdmin();
        // SuperAdmins can write anything
        allow write: if isSuperAdmin();
        // Owners can update their own dispensary
        allow update: if isDispensaryOwner(dispensaryId);
        // Public can apply
        allow create: if true;
    }

    match /products/{productId} {
        // Public can read any product
        allow read: if true;
        // Only owners/staff of the linked dispensary or super admins can create/update/delete
        allow create, update, delete: if isOwnerOrStaffOfDispensary(request.resource.data.dispensaryId) || isSuperAdmin();
    }

    match /users/{userId} {
      allow read: if request.auth.uid == userId || isSuperAdmin();
      allow create: if true; // Public signup
      allow update: if request.auth.uid == userId || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // Allow logged-in users to read from the seeded collection
    match /my-seeded-collection/{strainId} {
      allow read: if isSignedIn();
    }

    // AUTHENTICATED USER COLLECTIONS
    match /productRequests/{requestId} {
        allow read, update: if isSignedIn() && (request.auth.uid == resource.data.requesterUid || request.auth.uid == resource.data.ownerUid || isSuperAdmin());
        allow create: if isSignedIn();
    }

    match /poolIssues/{issueId} {
        allow read, update: if isSuperAdmin();
        allow create: if isSignedIn(); // Only owners can create from client, but rule is general
    }

    match /notifications/{notificationId} {
        allow read, update, delete: if isSignedIn() && request.auth.uid == resource.data.recipientUid;
        allow create: if isSignedIn(); // Can be created by functions
    }
    
    match /aiInteractionsLog/{logId} {
        allow read: if isSignedIn() && (request.auth.uid == resource.data.userId || isSuperAdmin());
        allow create: if isSignedIn(); // Can be created by functions
    }
    
    match /creditPackages/{packageId} {
        allow read: if true; // Publicly viewable
        allow write: if isSuperAdmin();
    }
    
    match /stickersets/{stickerSetId} {
        allow read: if true; // Public can read
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && request.auth.uid == resource.data.creatorUid;
    }

  }
}
