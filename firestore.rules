rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user has a specific role
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Helper function to check if user is the owner of a document
    function isOwner(doc) {
      return request.auth.uid == doc.data.uid || request.auth.uid == doc.data.userId;
    }

    // Helper function to check if the user is a staff member of a dispensary
    function isStaffOf(dispensaryId) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId == dispensaryId;
    }
    
    // Helper function to check if the user is the owner of a dispensary
    function isDispensaryOwner(dispensaryId) {
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userDoc.role == 'DispensaryOwner' && userDoc.dispensaryId == dispensaryId;
    }

    // ===== User Profiles =====
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isAuthenticated() && (request.auth.uid == userId || hasRole('Super Admin'));
      
      // Users can create their own profile (on signup)
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // Users can update their own profile, but cannot change their role or credits
      allow update: if isAuthenticated() && (request.auth.uid == userId && !('role' in request.resource.data) && !('credits' in request.resource.data) || hasRole('Super Admin'));
      
      // Only Super Admins can delete users
      allow delete: if hasRole('Super Admin');
    }

    // ===== Dispensary Types =====
    match /dispensaryTypes/{typeId} {
        // Anyone can read the types of dispensaries available
        allow read: if true;
        // Only Super Admins can create, update, or delete types
        allow write: if hasRole('Super Admin');
    }
    
    // ===== Dispensary Product Categories =====
    match /dispensaryTypeProductCategories/{docId} {
        // Anyone can read product categories
        allow read: if true;
        // Only Super Admins can create or update categories
        allow write: if hasRole('Super Admin');
    }
    
    // ===== Dispensaries =====
    match /dispensaries/{dispensaryId} {
      // Public can read approved dispensary profiles
      allow read: if resource.data.status == 'Approved';

      // Authenticated users can create a new dispensary application
      allow create: if isAuthenticated();

      // Only Super Admins or the owner of the dispensary can update
      allow update: if hasRole('Super Admin') || isDispensaryOwner(dispensaryId);
      
      // Only Super Admins can delete a dispensary
      allow delete: if hasRole('Super Admin');
    }
    
    // ===== Products =====
    match /products/{productId} {
      // Anyone can read product info
      allow read: if true;
      
      // Only the staff/owner of the dispensary can create a product for it
      allow create: if isAuthenticated() && isStaffOf(request.resource.data.dispensaryId);

      // Only staff/owner of the dispensary or a super admin can update/delete it
      allow update, delete: if isAuthenticated() && (isStaffOf(resource.data.dispensaryId) || hasRole('Super Admin'));
    }

    // ===== Product Requests (Pool) =====
    match /productRequests/{requestId} {
      // Involved parties (requester/owner) and Super Admins can read
      allow read: if isAuthenticated() && 
                    (isStaffOf(resource.data.requesterDispensaryId) || 
                     isStaffOf(resource.data.productOwnerDispensaryId) || 
                     hasRole('Super Admin'));
                     
      // An authenticated staff member can create a request
      allow create: if isAuthenticated() && isStaffOf(request.resource.data.requesterDispensaryId);

      // Involved parties and Super Admins can update (e.g., add notes, change status)
      allow update: if isAuthenticated() && 
                    (isStaffOf(resource.data.requesterDispensaryId) || 
                     isStaffOf(resource.data.productOwnerDispensaryId) || 
                     hasRole('Super Admin'));
    }
    
    // ===== Pool Issues =====
    match /poolIssues/{issueId} {
      // Only Super Admins can read and manage pool issues
      allow read, write: if hasRole('Super Admin');
      
      // Involved parties can create an issue
      allow create: if isAuthenticated() && 
                    (isStaffOf(request.resource.data.reporterDispensaryId) || 
                     isStaffOf(request.resource.data.reportedDispensaryId));
    }

    // ===== AI Interaction Logs =====
    match /aiInteractionsLog/{logId} {
      // Users can read their own logs, Super Admins can read all logs
      allow read: if isAuthenticated() && (isOwner(resource.data) || hasRole('Super Admin'));
      // Only backend functions can create logs (no client creation)
      allow create: if true; // Let backend function security handle this
      allow update, delete: if false; // Logs should be immutable from the client
    }
    
    // ===== Credit Packages =====
    match /creditPackages/{packageId} {
      // Anyone can read active packages
      allow read: if resource.data.isActive == true;
      // Super Admins can read all packages
      allow list: if hasRole('Super Admin');
      // Only Super Admins can create, update, or delete packages
      allow write: if hasRole('Super Admin');
    }
    
     // ===== Sticker Sets =====
    match /stickersets/{setId} {
      // Anyone can read public sticker sets
      allow read: if resource.data.isPublic == true;
      // Owners or Super Admins can read their own non-public sets
      allow get: if (resource.data.isPublic == true) || (isAuthenticated() && (isOwner(resource.data) || hasRole('Super Admin')));
      // Authenticated users can create sets
      allow create: if isAuthenticated();
      // Owner or Super Admin can update/delete
      allow update, delete: if isAuthenticated() && (isOwner(resource.data) || hasRole('Super Admin'));
    }

  }
}
