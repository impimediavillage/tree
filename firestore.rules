
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // HELPER FUNCTIONS
    function isSuperAdmin() {
      return request.auth != null && request.auth.token.role == 'Super Admin';
    }

    function isDispensaryOwner(dispensaryId) {
      return request.auth != null && request.auth.token.role == 'DispensaryOwner' && request.auth.token.dispensaryId == dispensaryId;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isPublicRead(resource) {
        return resource.data.status == 'Approved';
    }

    // COLLECTIONS

    // Dispensary Types: Anyone can read, only super admin can write.
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Dispensary Product Categories: Anyone can read, only super admin can write.
    match /dispensaryTypeProductCategories/{docId} {
       allow read: if true;
       allow write: if isSuperAdmin();
    }
    
    // My Seeded Collection: Anyone can read, only super admin can write.
    match /my-seeded-collection/{strainId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Imports History & Scrape Logs: Only super admin can read/write.
    match /importsHistory/{historyId} {
      allow read, write: if isSuperAdmin();
    }
     match /scrapeLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    
    // Credit Packages: Anyone can read active packages, only super admin can write.
    match /creditPackages/{packageId} {
      allow get: if true;
      allow list: if request.query.where.size() == 0 || (request.query.where.size() == 1 && request.query.where[0][0] == 'isActive' && request.query.where[0][2] == true);
      allow write: if isSuperAdmin();
    }

    // Users: Complex rules based on role.
    match /users/{userId} {
      // READ:
      // Super Admins can read any user profile.
      // Users can read their own profile.
      // Dispensary owners can read users associated with their dispensary.
      allow get: if isSuperAdmin() || request.auth.uid == userId;
      allow list: if isSuperAdmin();

      // CREATE: Anyone can create their own user document (on signup).
      allow create: if request.auth.uid == userId;

      // UPDATE:
      // Super Admins can update any user.
      // Users can update their own profile.
      allow update: if isSuperAdmin() || request.auth.uid == userId;
      
      // DELETE: Only Super Admins can delete users.
      allow delete: if isSuperAdmin();
    }

    // Dispensaries: Public can list/read approved ones. Owners can manage their own. Super admin manages all.
    match /dispensaries/{dispensaryId} {
        // READ:
        // Anyone can get/list approved dispensaries.
        // Super Admins can get/list any dispensary.
        // Owners can get their own dispensary.
        allow get: if isPublicRead(resource) || isSuperAdmin() || isDispensaryOwner(dispensaryId);
        allow list: if true; // Allows public listing, queries will filter status client-side or via rules on query

        // CREATE:
        // Any user can create a dispensary application, but ONLY if status is 'Pending Approval'.
        allow create: if request.resource.data.status == 'Pending Approval';
        
        // UPDATE:
        // Super Admins can update any dispensary.
        // Owners can update their own dispensary.
        allow update: if isSuperAdmin() || isDispensaryOwner(dispensaryId);

        // DELETE: Only Super Admins can delete.
        allow delete: if isSuperAdmin();
    }

    // Products: Public can read approved products. Owners manage their own.
    match /products/{productId} {
      allow get, list: if true; // Public read access
      allow create: if isDispensaryOwner(request.resource.data.dispensaryId) || isSuperAdmin();
      allow update, delete: if isDispensaryOwner(resource.data.dispensaryId) || isSuperAdmin();
    }
    
    // Notifications: Users can only read/write their own notifications.
    match /notifications/{notificationId} {
        allow read, write, delete: if isSignedIn() && (isSuperAdmin() || request.auth.uid == resource.data.recipientUid);
        allow create: if isSignedIn(); // Backend function creates these.
    }
    
    // Product Requests: Only involved parties or super admin can interact.
    match /productRequests/{requestId} {
        allow get: if isSuperAdmin() || isDispensaryOwner(resource.data.productOwnerDispensaryId) || isDispensaryOwner(resource.data.requesterDispensaryId);
        allow create: if isDispensaryOwner(request.resource.data.requesterDispensaryId);
        allow update: if isSuperAdmin() || isDispensaryOwner(resource.data.productOwnerDispensaryId) || isDispensaryOwner(resource.data.requesterDispensaryId);
        allow delete: if isSuperAdmin();
        allow list: if isSuperAdmin() || (isSignedIn() && request.auth.token.dispensaryId != null);
    }
    
    // Pool Issues: Only super admins can manage these. Owners can create.
    match /poolIssues/{issueId} {
        allow read, update, delete: if isSuperAdmin();
        allow create: if isDispensaryOwner(request.resource.data.reporterDispensaryId);
        allow list: if isSuperAdmin();
    }
    
    // AI Interaction Logs: Users can only see their own logs.
    match /aiInteractionsLog/{logId} {
        allow read: if isSuperAdmin() || (isSignedIn() && request.auth.uid == resource.data.userId);
        allow list: if isSuperAdmin() || (isSignedIn() && request.auth.token.dispensaryId != null);
        allow create: if isSignedIn(); // Logged by backend function
    }

    // Sticker Sets: Public read, only creator/admin can write.
    match /stickersets/{setId} {
      allow get: if resource.data.isPublic == true || (isSignedIn() && request.auth.uid == resource.data.creatorUid) || isSuperAdmin();
      allow list: if request.query.where.size() == 0 || (request.query.where.size() > 0 && request.query.where[0][0] == 'isPublic' && request.query.where[0][2] == true);
      allow create: if isSignedIn();
      allow update, delete: if (isSignedIn() && request.auth.uid == resource.data.creatorUid) || isSuperAdmin();
    }

  }
}
