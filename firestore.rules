rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default-deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // AUTH: Logged-in users can read/update their own user document
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
    }

    // PUBLIC: Anyone can read approved dispensaries and their types
    match /dispensaryTypes/{typeId} {
      allow read: if true;
    }
    match /dispensaries/{dispensaryId} {
      allow read: if resource.data.status == 'Approved';
    }

    // Anyone can read products of approved dispensaries.
    // This supports the public-facing storefronts.
    match /products/{productId} {
      allow read: if get(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)).data.status == 'Approved';
    }

    // DISPENSARY ADMIN SCOPED RULES
    // These rules allow a dispensary owner or staff to manage their own resources.
    // This uses a collection group, which is more powerful for securing queries.
    match /{path=**}/products/{productId} {
        // Allows a dispensary user to LIST (query) products that belong to their dispensary.
        // This is the key rule for fixing the "insufficient permissions" error on the products page.
        allow list: if request.auth != null &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId != null;

        // Allow a user to create, update, or delete a product if their dispensaryId matches the product's.
        allow write: if request.auth != null && 
                      request.resource.data.dispensaryId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId;
    }

    match /{path=**}/productRequests/{requestId} {
      // Allow users to query requests where they are either the sender or receiver
      allow list: if request.auth != null &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId != null;
      
      // Allow create/write if the user is part of the transaction
      allow write: if request.auth != null &&
                    (request.resource.data.requesterDispensaryId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId ||
                     request.resource.data.productOwnerDispensaryId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId);
    }
    
    // SUPER ADMIN: Unrestricted access for all collections needed for the admin panel.
    // These are broad because the admin panel is protected by the Super Admin role check in the UI layout.
    function isSuperAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super Admin';
    }

    match /users/{userId} {
      allow write: if isSuperAdmin();
    }
    match /dispensaries/{dispensaryId} {
      // Allow read for admins regardless of status
      allow read, write: if isSuperAdmin();
    }
     match /dispensaryTypeProductCategories/{docId} {
      allow read, write: if isSuperAdmin();
    }
    match /dispensaryTypes/{typeId} {
      allow write: if isSuperAdmin();
    }
    match /creditPackages/{packageId} {
        allow read, write: if isSuperAdmin();
    }
    match /poolIssues/{issueId} {
        allow read, write: if isSuperAdmin();
    }
    match /aiInteractionsLog/{logId} {
        allow read, write: if isSuperAdmin();
    }
    match /stickersets/{setId} {
      allow read: if true; // Publicly viewable
      allow write: if request.auth != null && (isSuperAdmin() || request.resource.data.creatorUid == request.auth.uid);
    }
  }
}
