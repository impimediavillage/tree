
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user has a specific role
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Helper function to check if a user is the owner of a specific dispensary
    function isDispensaryOwner(dispensaryId) {
      return request.auth.uid == get(/databases/$(database)/documents/dispensaries/$(dispensaryId)).data.ownerId;
    }
    
    // Helper function to check if a user is staff of a specific dispensary
    function isDispensaryStaff(dispensaryId) {
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userDoc.role == 'DispensaryStaff' && userDoc.dispensaryId == dispensaryId;
    }

    // Helper function to check if a user is an owner or staff of a dispensary
    function isOwnerOrStaff(dispensaryId) {
        return isDispensaryOwner(dispensaryId) || isDispensaryStaff(dispensaryId);
    }
    
    // Helper function to check if the user is a Super Admin
    function isSuperAdmin() {
      return hasRole('Super Admin');
    }

    // Helper function to check if the user is a standard authenticated user
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // USERS: Users can read/write their own profile. Admins can read/write any profile.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isSuperAdmin();
    }
    
    // DISPENSARIES: Public can read approved. Owners can read/write their own. Admins can do anything.
    match /dispensaries/{dispensaryId} {
      allow read: if resource.data.status == 'Approved' || (isAuthenticated() && (isOwnerOrStaff(dispensaryId) || isSuperAdmin()));
      allow create: if isAuthenticated(); // Anyone can apply
      allow update: if isOwnerOrStaff(dispensaryId) || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
    
    // DISPENSARY TYPES: Public can read. Admins can manage.
    match /dispensaryTypes/{typeId} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }
    
    // PRODUCT CATEGORIES: Public can read. Admins can manage.
    match /dispensaryTypeProductCategories/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // PRODUCTS: Public can read approved. Owners can manage their own. Admins can do anything.
    match /products/{productId} {
      allow read: if get(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)).data.status == 'Approved' || (isAuthenticated() && (isOwnerOrStaff(resource.data.dispensaryId) || isSuperAdmin()));
      allow create: if isAuthenticated() && isOwnerOrStaff(request.resource.data.dispensaryId);
      allow update: if isAuthenticated() && isOwnerOrStaff(resource.data.dispensaryId);
      allow delete: if isAuthenticated() && isOwnerOrStaff(resource.data.dispensaryId);
      
      // Allow wellness owners/staff to list their own products
      allow list: if isAuthenticated() && (request.query.where.size() > 0 && request.query.where[0][0] == 'dispensaryId' && request.query.where[0][2] == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId);
    }
    
    // PRODUCT REQUESTS: Only involved parties or admins can access.
    match /productRequests/{requestId} {
      allow read: if isAuthenticated() && (isOwnerOrStaff(resource.data.productOwnerDispensaryId) || isOwnerOrStaff(resource.data.requesterDispensaryId) || isSuperAdmin());
      allow create: if isAuthenticated() && isOwnerOrStaff(request.resource.data.requesterDispensaryId);
      allow update: if isAuthenticated() && (isOwnerOrStaff(resource.data.productOwnerDispensaryId) || isOwnerOrStaff(resource.data.requesterDispensaryId) || isSuperAdmin());
      allow delete: if isSuperAdmin();
    }
    
    // NOTIFICATIONS: Users can only read their own notifications.
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && resource.data.recipientUid == request.auth.uid;
      allow create: if isAuthenticated(); // Functions create these
    }
    
    // CREDIT PACKAGES: Public can read active. Admins can manage.
    match /creditPackages/{packageId} {
      allow read: if resource.data.isActive == true;
      allow write: if isSuperAdmin();
    }
    
    // POOL ISSUES: Only admins can manage. Involved parties can create.
    match /poolIssues/{issueId} {
      allow read, update, delete: if isSuperAdmin();
      allow create: if isAuthenticated() && (isOwnerOrStaff(request.resource.data.reporterDispensaryId) || isOwnerOrStaff(request.resource.data.reportedDispensaryId));
    }
    
    // AI INTERACTION LOGS: Users can read their own. Admins can read all.
    match /aiInteractionsLog/{logId} {
      allow read: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isSuperAdmin();
      allow create: if isAuthenticated(); // Created by functions
    }
    
    // SCRAPE & IMPORT LOGS: Admins only.
    match /scrapeLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    match /importsHistory/{historyId} {
        allow read, write: if isSuperAdmin();
    }
    
    // JustBrand Catalog Data: Read-only for authenticated users, writable by admins.
    match /justbrand_catalog/{docId=**} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }
    
    // Seeded Strain Data: Readable by authenticated users, writable by admins.
    match /my-seeded-collection/{strainId} {
        allow read: if isAuthenticated();
        allow write: if isSuperAdmin();
    }
    
    // Sticker Sets: Public can read public sets. Owners can manage their own. Admins can do anything.
    match /stickersets/{setId} {
        allow read: if resource.data.isPublic == true || (isAuthenticated() && (resource.data.creatorUid == request.auth.uid || isSuperAdmin()));
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && (resource.data.creatorUid == request.auth.uid || isSuperAdmin());
        allow delete: if isAuthenticated() && (resource.data.creatorUid == request.auth.uid || isSuperAdmin());
    }
  }
}
