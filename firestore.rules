
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Super Admin role from token
    function isSuperAdmin() {
      return request.auth != null && request.auth.token.role == 'Super Admin';
    }

    // Helper function to check for any authenticated user
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a resource
    function isResourceOwner(resource) {
        return request.auth.uid == resource.data.uid;
    }
    
    // Helper function to check if the user belongs to the dispensary linked to a resource
    function isDispensaryMemberForResource(resource) {
        return isAuthenticated() && resource.data.dispensaryId == request.auth.token.dispensaryId;
    }

    // =====================================================================
    // Public Collections - Read-only for everyone
    // =====================================================================
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    match /dispensaryTypeProductCategories/{docId} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }
    
    match /creditPackages/{packageId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // =====================================================================
    // Users Collection
    // =====================================================================
    match /users/{userId} {
      // Any authenticated user can read their own profile
      allow get: if isResourceOwner(resource);
      
      // A user can create their own document, or a Super Admin can.
      allow create: if isResourceOwner(resource) || isSuperAdmin();
      
      // A user can update their own profile. Super Admins can update any profile.
      allow update: if isResourceOwner(resource) || isSuperAdmin();
      
      // Super Admins can list/delete users.
      allow list, delete: if isSuperAdmin();
    }

    // =====================================================================
    // Dispensaries (Stores) Collection
    // =====================================================================
    match /dispensaries/{dispensaryId} {
      // Anyone can read an approved dispensary's profile.
      // Authenticated users can read their own (even if pending).
      allow get: if resource.data.status == 'Approved' || 
                   (isAuthenticated() && request.auth.token.dispensaryId == dispensaryId);
                   
      // Anyone can create a dispensary application.
      allow create: if true;
      
      // Only Super Admins can update any dispensary.
      // Dispensary owners can update their own.
      allow update: if isSuperAdmin() || 
                      (isAuthenticated() && request.auth.token.dispensaryId == dispensaryId);
                      
      // Only Super Admins can list all or delete dispensaries.
      allow list, delete: if isSuperAdmin();
    }
    
    // =====================================================================
    // Products Collection
    // =====================================================================
    match /products/{productId} {
      // Anyone can read any product.
      allow get: if true;
      
      // Authenticated users can list products. 
      // The query on the client-side will filter by dispensaryId for dispensary owners.
      allow list: if isAuthenticated();
      
      // A user can only create/update/delete a product if their token's dispensaryId matches the product's dispensaryId.
      allow write: if isDispensaryMemberForResource(request.resource);
    }
    
    // =====================================================================
    // Product Sharing Pool Requests
    // =====================================================================
    match /productRequests/{requestId} {
      // A user can read a request if they are the requester or the owner of the requested product.
      allow get: if isAuthenticated() && 
                   (request.resource.data.requesterDispensaryId == request.auth.token.dispensaryId || 
                    request.resource.data.productOwnerDispensaryId == request.auth.token.dispensaryId);
                    
      // A user can list requests where they are either the requester or owner.
      // Requires composite indexes to work.
      allow list: if isAuthenticated();
      
      // A user can create a request.
      allow create: if isAuthenticated();
      
      // A user can update a request if they are the requester or the owner.
      allow update: if isAuthenticated() &&
                      (request.resource.data.requesterDispensaryId == request.auth.token.dispensaryId || 
                       request.resource.data.productOwnerDispensaryId == request.auth.token.dispensaryId);
                       
      allow delete: if isSuperAdmin();
    }
    
    // =====================================================================
    // AI Interaction Logs
    // =====================================================================
    match /aiInteractionsLog/{logId} {
        // Users can only create their own logs, not read, update, or delete them.
        allow read, update, delete: if isSuperAdmin();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    // =====================================================================
    // Other Admin-Only Collections
    // =====================================================================
    match /poolIssues/{issueId} {
      allow read, write: if isSuperAdmin();
    }
    
     match /stickersets/{stickerId} {
      // Anyone can read a public sticker set.
      allow get: if resource.data.isPublic == true;
      // The creator can read/update/delete their own sticker sets.
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.creatorUid;
      // Super admins can do anything.
      allow read, write, delete: if isSuperAdmin();
    }

  }
}
