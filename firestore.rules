
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user has a specific role
    function hasRole(role) {
      return request.auth.token.role == role;
    }
    
    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if user is a Super Admin
    function isSuperAdmin() {
      return hasRole('Super Admin');
    }

    // Helper function to check if user is associated with a specific dispensary
    function isDispensaryMember(dispensaryId) {
      return request.auth.token.dispensaryId == dispensaryId;
    }

    // Users collection:
    // - Authenticated users can read/write their own document
    // - Super Admins can read/write any user document
    // - Dispensary Owners can read users associated with their dispensary
    match /users/{userId} {
      allow read: if isOwner(userId) || isSuperAdmin() || isDispensaryMember(resource.data.dispensaryId);
      allow write: if isOwner(userId) || isSuperAdmin();
      allow create: if request.auth != null; // Any authenticated user can create their own profile doc
    }
    
    // Dispensaries collection:
    // - Anyone can create a dispensary application
    // - Super Admins can read/write any dispensary
    // - Dispensary Owners can read/write their own dispensary
    match /dispensaries/{dispensaryId} {
      allow read: if resource.data.status == 'Approved' || isSuperAdmin() || isDispensaryMember(dispensaryId);
      allow create: if request.auth != null; // Let anyone apply
      allow update, delete: if isSuperAdmin() || isDispensaryMember(dispensaryId);
    }

    // Products collection:
    // - Anyone can read approved products from approved dispensaries
    // - Dispensary Owners can manage products for their own dispensary
    // - Super Admins can manage any product
    match /products/{productId} {
      function isProductFromApprovedDispensary() {
        return get(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)).data.status == 'Approved';
      }
      allow read: if isProductFromApprovedDispensary();
      allow write: if isDispensaryMember(request.resource.data.dispensaryId) || isSuperAdmin();
    }
    
    // Dispensary Types & Categories (Publicly readable)
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    match /dispensaryTypeProductCategories/{docId} {
       allow read: if true;
       allow write: if isSuperAdmin();
    }
    
    // Product Requests
    match /productRequests/{requestId} {
        allow read: if isDispensaryMember(resource.data.productOwnerDispensaryId) || isDispensaryMember(resource.data.requesterDispensaryId) || isSuperAdmin();
        allow create: if isDispensaryMember(request.resource.data.requesterDispensaryId);
        allow update: if isDispensaryMember(resource.data.productOwnerDispensaryId) || isDispensaryMember(resource.data.requesterDispensaryId) || isSuperAdmin();
    }
    
    // Credit Packages (Publicly readable, admin write)
    match /creditPackages/{packageId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // AI Interaction Logs (Only user themselves or admin can read)
    match /aiInteractionsLog/{logId} {
      allow read: if isOwner(resource.data.userId) || isSuperAdmin();
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // Notifications (User can only read their own)
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.recipientUid);
      allow write: if isSuperAdmin(); // Or a function that can write notifications
    }
    
    // Sticker Sets
    match /stickersets/{setId} {
      allow read: if resource.data.isPublic == true;
      allow write: if isOwner(request.resource.data.creatorUid) || isSuperAdmin();
    }
    
    // Scrape/Import Logs (Admin only)
    match /scrapeLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    match /importsHistory/{historyId} {
      allow read, write: if isSuperAdmin();
    }
    
    // Fallback for any other collections - deny all access by default
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
