rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to reduce repetition
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    function isDispensaryOwner() {
      return request.auth.token.role == 'DispensaryOwner';
    }

    function isDispensaryStaff() {
        return request.auth.token.role == 'DispensaryStaff';
    }

    function isOwnerOrStaffOfDispensary(dispensaryId) {
        return request.auth.token.dispensaryId == dispensaryId;
    }

    function isDispensaryMember() {
        return isDispensaryOwner() || isDispensaryStaff();
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the user is the owner of a given document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // DISPENSARY TYPES: Public can read, only Super Admins can write/delete
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write, delete: if isSuperAdmin();
    }

    // DISPENSARY TYPE PRODUCT CATEGORIES: Authenticated users can read, only Super Admins can write/delete
    match /dispensaryTypeProductCategories/{docId} {
      allow read: if isAuthenticated();
      allow write, delete: if isSuperAdmin();
    }

    // DISPENSARIES: 
    match /dispensaries/{dispensaryId} {
      // ANYONE can read an approved dispensary profile
      allow get: if resource.data.status == 'Approved';
      // ANYONE can list approved dispensaries
      allow list: if query.filters.size() == 0 || (
                    (query.filters.size() == 1 && 'dispensaryType' in query.filters[0]) ||
                    (query.filters.size() == 2 && 'dispensaryType' in query.filters[0] && 'status' in query.filters[1] && query.filters[1][2] == 'Approved')
                  );

      // A dispensary owner can read their own dispensary document regardless of status.
      // This is critical for the owner's dashboard to function.
      allow read: if isOwner(resource.data.ownerId);

      // Only the owner can update their own dispensary document.
      allow update: if isOwner(resource.data.ownerId);
      
      // Creating a dispensary is a public action (signup form)
      allow create: if true;

      // Only a super admin can delete a dispensary document.
      allow delete: if isSuperAdmin();
    }

    // USERS:
    match /users/{userId} {
      // Users can read and update their own document.
      // SuperAdmins can read/write any user document.
      allow read, update: if isOwner(userId) || isSuperAdmin();
      // Only Super Admins can create or delete user docs directly (most creation is via auth triggers).
      allow create, delete: if isSuperAdmin();
    }

    // PRODUCTS:
    match /products/{productId} {
      // Anyone can read an approved dispensary's products
      allow get: if get(/databases/$(database)/documents/dispensaries/$(resource.data.dispensaryId)).data.status == 'Approved';
      
      // Anyone can list products from an approved dispensary
      allow list: if query.filters.size() > 0 && 
                   'dispensaryId' in query.filters[0] && 
                   get(/databases/$(database)/documents/dispensaries/$(query.filters[0][2])).data.status == 'Approved';
                   
      // Owners/Staff can do anything to products that belong to their dispensary
      allow read, write, create, delete: if isDispensaryMember() && isOwnerOrStaffOfDispensary(resource.data.dispensaryId);
    }
    
    // CART & ORDERS (Example, adjust as needed)
    match /users/{userId}/cart/{cartItemId} {
        allow read, write, delete: if isOwner(userId);
    }

    match /orders/{orderId} {
      allow read: if isOwner(resource.data.userId) || isOwnerOrStaffOfDispensary(resource.data.dispensaryId) || isSuperAdmin();
      allow create: if isAuthenticated();
      allow update: if isOwnerOrStaffOfDispensary(resource.data.dispensaryId) || isSuperAdmin();
    }
    
    // Product Requests (Pool)
    match /productRequests/{requestId} {
        // The requester (owner/staff) can read/update their request.
        // The owner of the product can read/update the request.
        allow read, update: if isDispensaryMember() && 
                             (isOwnerOrStaffOfDispensary(resource.data.requesterDispensaryId) || 
                              isOwnerOrStaffOfDispensary(resource.data.productOwnerDispensaryId));
        // Only a member of a dispensary can create a request.
        allow create: if isDispensaryMember();
        allow delete: if isSuperAdmin();
    }
    
    // Pool Issues
    match /poolIssues/{issueId} {
        // Reporter, reported party, and SuperAdmins can read.
        allow read: if isDispensaryMember() && 
                     (isOwnerOrStaffOfDispensary(resource.data.reporterDispensaryId) || 
                      isOwnerOrStaffOfDispensary(resource.data.reportedDispensaryId)) || 
                     isSuperAdmin();
        // Only a member of a dispensary can create an issue.
        allow create: if isDispensaryMember();
        // Only SuperAdmins can update/delete issues.
        allow update, delete: if isSuperAdmin();
    }
    
    // Notifications
    match /notifications/{notificationId} {
        // Only the recipient can read/update/delete their own notification.
        allow read, update, delete: if isOwner(resource.data.recipientUid);
        allow create: if isSuperAdmin() || isDispensaryMember(); // Can be triggered by functions or sent by admins.
    }
    
    // Credit Packages: public read, admin write
    match /creditPackages/{packageId} {
        allow read: if true;
        allow write, delete: if isSuperAdmin();
    }
    
    // Sticker Sets
    match /stickersets/{setId} {
        // Anyone can read a public sticker set
        allow get: if resource.data.isPublic == true;
        // Only owner can read/update their own non-public sets
        allow read, update, delete: if isOwner(resource.data.creatorUid);
        allow create: if isAuthenticated();
    }

    // AI Interaction Logs (write-only for users through functions, read-only for admins)
    match /aiInteractionsLog/{logId} {
      allow read: if isSuperAdmin();
      // No client-side creation allowed, only via secure cloud function.
      allow create, update, delete: if false; 
    }
    
    // Scrape Logs (admin only)
    match /scrapeLogs/{logId} {
        allow read, write: if isSuperAdmin();
    }
    match /importsHistory/{historyId} {
        allow read, write: if isSuperAdmin();
    }
  }
}
