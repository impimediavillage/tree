
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function hasRole(role) {
      return request.auth.token.role == role;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is linked to a specific dispensary
    function isDispensaryMember(dispensaryId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId == dispensaryId;
    }

    // Dispensaries Collection
    match /dispensaries/{dispensaryId} {
      allow read: if true;
      allow create: if request.auth != null; // Any authenticated user can apply
      allow update: if hasRole('Super Admin') || (hasRole('DispensaryOwner') && isDispensaryMember(dispensaryId));
      allow delete: if hasRole('Super Admin');
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null; // Any authenticated user can read user profiles (e.g. for display names)
      allow create: if request.auth.uid == userId; // User can create their own doc
      allow update: if isOwner(userId) || hasRole('Super Admin');
      allow delete: if hasRole('Super Admin');
    }

    // Products Collection
    match /products/{productId} {
      allow read: if true;
      allow list: if hasRole('Super Admin') || (request.auth != null && request.query.where[0][2] == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId);
      allow create, update: if hasRole('Super Admin') || (hasRole('DispensaryOwner') && isDispensaryMember(resource.data.dispensaryId));
      allow delete: if hasRole('Super Admin') || (hasRole('DispensaryOwner') && isDispensaryMember(request.resource.data.dispensaryId));
    }

    // Product Requests Collection
    match /productRequests/{requestId} {
      allow read: if hasRole('Super Admin') || isDispensaryMember(resource.data.requesterDispensaryId) || isDispensaryMember(resource.data.productOwnerDispensaryId);
      allow list: if hasRole('Super Admin') || (request.auth != null && request.query.where[0][2] == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId);
      allow create: if hasRole('DispensaryOwner') && isDispensaryMember(request.resource.data.requesterDispensaryId);
      allow update: if hasRole('Super Admin') || isDispensaryMember(resource.data.requesterDispensaryId) || isDispensaryMember(resource.data.productOwnerDispensaryId);
      allow delete: if hasRole('Super Admin');
    }

    // Pool Issues Collection
    match /poolIssues/{issueId} {
      allow read, update, delete: if hasRole('Super Admin');
      allow create: if request.auth != null; // Any authenticated user can report an issue
    }

    // Credit Packages Collection
    match /creditPackages/{packageId} {
        allow read: if true;
        allow create, update, delete: if hasRole('Super Admin');
    }
    
    // Dispensary Types Collection
     match /dispensaryTypes/{typeId} {
        allow read: if true;
        allow create, update, delete: if hasRole('Super Admin');
    }
    
    // Dispensary Type Product Categories Collection
    match /dispensaryTypeProductCategories/{docId} {
        allow read: if true;
        allow create, update, delete: if hasRole('Super Admin');
    }

    // AI Interactions Log Collection
    match /aiInteractionsLog/{logId} {
        allow read: if hasRole('Super Admin') || isOwner(resource.data.userId);
        allow create: if request.auth != null; // Logged by trusted server-side function
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.recipientUid);
        allow create, delete: if hasRole('Super Admin'); // Or trusted function
    }
    
    // Imports History Collection
    match /importsHistory/{importId} {
        allow read, create, update: if hasRole('Super Admin');
    }
    
    // Scrape Logs Collection
    match /scrapeLogs/{logId} {
        allow read, create, update: if hasRole('Super Admin');
    }
    
    // Sticker Sets Collection
    match /stickersets/{setId} {
        allow read: if resource.data.isPublic == true || isOwner(resource.data.creatorUid) || hasRole('Super Admin');
        allow list: if request.query.where[0][0] == 'isPublic' && request.query.where[0][2] == true;
        allow create: if request.auth != null;
        allow update, delete: if isOwner(resource.data.creatorUid) || hasRole('Super Admin');
    }
    
    // Seed Data Collection
    match /my-seeded-collection/{strainId} {
      allow read: if request.auth != null;
      allow list: if request.auth != null;
    }
    
    // JustBrand Catalog Collection
    match /justbrand_catalog/{categoryId} {
        allow read: if true;
        match /products/{productId} {
          allow read: if true;
        }
    }
  }
}
