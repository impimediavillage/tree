
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Super Admin role
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }

    // Helper function to check for any authenticated user
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Unauthenticated users can sign up by creating a dispensary application
    match /dispensaries/{dispensaryId} {
      allow create: if true;
      allow read: if isSignedIn() || isSuperAdmin();
      allow update, delete: if isSuperAdmin();
    }
    
    // Public read for dispensary types for signup forms etc.
    match /dispensaryTypes/{typeId} {
        allow read: if true; // Publicly readable
        allow write: if isSuperAdmin(); // Only admins can change types
    }
    
    // Public read for product category structures
    match /dispensaryTypeProductCategories/{docId} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }

    // Users can only manage their own document, but admins can manage any.
    match /users/{userId} {
      allow read: if isOwner(userId) || isSuperAdmin();
      allow create: if isSuperAdmin(); // Allow admin to create users
      allow update: if isOwner(userId) || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // Allow public read for products, but only owner or admin can write
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && (isOwner(request.resource.data.productOwnerDispensaryId) || isSuperAdmin());
    }

    // Authenticated users can manage their own requests.
    // Owners can manage requests for their products.
    // Admins can manage all.
    match /productRequests/{requestId} {
      allow read, update: if isSignedIn() || isSuperAdmin();
      allow create: if isSignedIn() || isSuperAdmin();
    }

    // Only admins can read/write pool issues
    match /poolIssues/{issueId} {
       allow read, write: if isSuperAdmin();
    }

    // Notifications are private to the recipient, but writable by functions (admin).
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && isOwner(resource.data.recipientUid) || isSuperAdmin();
      allow create: if isSuperAdmin(); // Functions with admin context will create these
      allow delete: if isOwner(resource.data.recipientUid) || isSuperAdmin();
    }
    
    // Credit packages are public to read, only admin to write.
    match /creditPackages/{packageId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Interaction logs are private to the user, but writable by functions (admin).
    match /aiInteractionsLog/{logId} {
       allow read: if (isSignedIn() && isOwner(resource.data.userId)) || isSuperAdmin();
       allow create: if isSuperAdmin(); // Only functions (admin context) can create logs
       allow update, delete: if isSuperAdmin();
    }
    
    // Sticker sets can be read publicly if marked as such.
    // Owners can manage their own sets. Admins can manage all.
    match /stickersets/{setId} {
        allow read: if resource.data.isPublic == true || (isSignedIn() && isOwner(resource.data.creatorUid)) || isSuperAdmin();
        allow create, update: if (isSignedIn() && isOwner(request.resource.data.creatorUid)) || isSuperAdmin();
        allow delete: if (isSignedIn() && isOwner(resource.data.creatorUid)) || isSuperAdmin();
    }

    // Allow admins to access scrape logs and history.
    match /scrapeLogs/{logId} {
        allow read, write: if isSuperAdmin();
    }
    match /importsHistory/{historyId} {
        allow read, write: if isSuperAdmin();
    }
     match /justbrand_catalog/{docId}/{path=**} {
      allow read: if isSuperAdmin();
      allow write: if isSuperAdmin();
    }
  }
}
