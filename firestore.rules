
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSuperAdmin() {
      return request.auth.token.role == 'Super Admin';
    }
    
    function isDispensaryOwner() {
      return request.auth.token.role == 'DispensaryOwner';
    }

    function isDispensaryStaff() {
      return request.auth.token.role == 'DispensaryStaff';
    }

    function isDispensaryUser() {
      return isDispensaryOwner() || isDispensaryStaff();
    }
    
    function isOwnerOfDispensary(dispensaryId) {
      return request.auth.token.dispensaryId == dispensaryId;
    }
    
    function isStaffOfDispensary(dispensaryId) {
       return request.auth.token.dispensaryId == dispensaryId;
    }
    
    function isMemberOfDispensary(dispensaryId) {
      return isOwnerOfDispensary(dispensaryId) || isStaffOfDispensary(dispensaryId);
    }
    
    // Dispensary Types: Public read, only admins can write.
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // Dispensary Type Product Categories: Public read, only admins can write.
    match /dispensaryTypeProductCategories/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // Dispensaries: Public can read approved ones. Admins can manage all.
    match /dispensaries/{dispensaryId} {
      allow get: if resource.data.status == 'Approved' || isSuperAdmin();
      allow list: if isSuperAdmin(); // Only super admins can list all. Public needs specific queries.
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() || isOwnerOfDispensary(dispensaryId);
      allow delete: if isSuperAdmin();
    }
    
    // Users: Users can read/update their own doc. Admins can manage users within their dispensary or all users if Super Admin.
    match /users/{userId} {
      allow get: if request.auth.uid == userId || isSuperAdmin() || isMemberOfDispensary(resource.data.dispensaryId);
      allow list: if isSuperAdmin() || isDispensaryUser(); // Allow dispensary users to list users for their dispensary
      allow create: if request.auth.uid == userId; // User creation
      allow update: if request.auth.uid == userId || isSuperAdmin() || (isDispensaryOwner() && isOwnerOfDispensary(resource.data.dispensaryId));
      allow delete: if isSuperAdmin();
    }

    // Products: Public can read. Only members of the dispensary can write.
    match /products/{productId} {
      allow get: if true;
      // Allow dispensary users to list products for THEIR dispensary.
      // This is the key rule that fixes the "permission-denied" error.
      allow list: if isDispensaryUser() || isSuperAdmin();
      allow create, update, delete: if isMemberOfDispensary(request.resource.data.dispensaryId);
    }

    // Product Requests: Only involved parties can read/write.
    match /productRequests/{requestId} {
      allow read, write: if isMemberOfDispensary(resource.data.productOwnerDispensaryId) || isMemberOfDispensary(resource.data.requesterDispensaryId) || isSuperAdmin();
    }
    
    // Pool Issues: Only Super Admins can manage.
    match /poolIssues/{issueId} {
        allow read, write: if isSuperAdmin();
    }
    
    // AI Interaction Logs: Only the user who made them or an admin can read.
    match /aiInteractionsLog/{logId} {
        allow read: if request.auth.uid == resource.data.userId || isSuperAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Credit Packages: Public read, admin write.
    match /creditPackages/{packageId} {
        allow read: if true;
        allow write: if isSuperAdmin();
    }

    // Sticker Sets: Public read, creator can write, admin can manage.
    match /stickersets/{setId} {
      allow get: if resource.data.isPublic == true || request.auth.uid == resource.data.creatorUid || isSuperAdmin();
      allow list: if request.query.where.creatorUid == request.auth.uid || request.query.where.isPublic == true || isSuperAdmin();
      allow create: if request.auth.uid == request.resource.data.creatorUid;
      allow update: if request.auth.uid == resource.data.creatorUid || isSuperAdmin();
      allow delete: if request.auth.uid == resource.data.creatorUid || isSuperAdmin();
    }

  }
}
