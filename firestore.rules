
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super Admin';
    }

    function isDispensaryOwner() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'DispensaryOwner';
    }
    
    function isDispensaryStaff() {
       return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'DispensaryStaff';
    }

    function isDispensaryMember(dispensaryId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userDoc.dispensaryId == dispensaryId && (userDoc.role == 'DispensaryOwner' || userDoc.role == 'DispensaryStaff');
    }
    
    function ownsDispensary(dispensaryId) {
        return request.auth != null && request.auth.token.dispensaryId == dispensaryId;
    }

    // Collection Rules
    
    match /dispensaries/{dispensaryId} {
      // Anyone can read approved dispensaries for public listings
      allow read: if resource.data.status == 'Approved' || isSuperAdmin();
      // Only Super Admins can create or delete dispensaries directly
      allow create, delete: if isSuperAdmin();
      // Super Admins can update. Owners/staff can update their own.
      allow update: if isSuperAdmin() || isDispensaryMember(dispensaryId);
    }

    match /dispensaryTypes/{typeId} {
      // Anyone can read the types of dispensaries available
      allow read: if true;
      // Only super admins can write to dispensary types
      allow write: if isSuperAdmin();
    }
    
    match /dispensaryTypeProductCategories/{docId} {
       // Anyone can read product category structures
      allow read: if true;
      // Only super admins can write to these structures
      allow write: if isSuperAdmin();
    }

    match /users/{userId} {
      // Users can read and update their own profile
      allow get, update: if request.auth != null && request.auth.uid == userId;
      // Super Admins can read/write any user profile
      allow read, write: if isSuperAdmin();
      // Dispensary owners can manage their own staff members
      allow write: if isDispensaryOwner() && resource.data.dispensaryId == request.auth.token.dispensaryId;
    }
    
    match /products/{productId} {
      // Anyone can read any product for public storefronts
      allow get: if true;
      // Authenticated users can query/list products (filtering happens client-side)
      allow list: if request.auth != null;
      
      // CREATE: Must be an authenticated owner/staff of the dispensary being associated.
      allow create: if request.auth != null && isDispensaryMember(request.resource.data.dispensaryId);
      
      // UPDATE, DELETE: Must be owner/staff of the dispensary that owns the product.
      // We check the existing resource's dispensaryId.
      allow update, delete: if request.auth != null && isDispensaryMember(resource.data.dispensaryId);
    }

    match /productRequests/{requestId} {
      allow read, write: if request.auth != null; // Simplified for now, can be tightened later if needed.
    }
    
    match /poolIssues/{issueId} {
       allow read, write: if request.auth != null; // Simplified for now.
    }
    
    match /creditPackages/{packageId} {
      allow read: if true; // Public can see packages
      allow write: if isSuperAdmin();
    }

    match /aiInteractionsLog/{logId} {
      // Users can only create logs for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Users can read their own logs. Super Admins can read any.
      allow get, list: if request.auth != null && (resource.data.userId == request.auth.uid || isSuperAdmin());
      // No updates or deletes allowed
      allow update, delete: if false;
    }
    
    match /stickersets/{setId} {
      // Anyone can read public sticker sets
      allow get: if resource.data.isPublic == true || (request.auth != null && resource.data.creatorUid == request.auth.uid);
      allow list: if true;
      
      // Users can create/update/delete their own sets
      allow create: if request.auth != null && request.resource.data.creatorUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.creatorUid == request.auth.uid;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
