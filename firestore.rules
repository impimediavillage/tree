
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for super admin role
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super Admin';
    }

    // Helper function to check for dispensary ownership/staff
    function isDispensaryAdmin(dispensaryId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId == dispensaryId;
    }

    // ============== USERS ==============
    match /users/{userId} {
      // A user can read their own profile.
      // Super Admins can read any profile.
      // Dispensary Owners can read profiles of users linked to their dispensary.
      allow read: if request.auth.uid == userId || isSuperAdmin() || 
                   (isDispensaryAdmin(get(/databases/$(database)/documents/users/$(userId)).data.dispensaryId));
      
      // A user can update their own profile. Super Admins can update any profile.
      // Dispensary Owners can update roles/status of users linked to their dispensary.
      allow update: if request.auth.uid == userId || isSuperAdmin() ||
                     (isDispensaryAdmin(resource.data.dispensaryId) && request.resource.data.keys().hasAll(['displayName', 'role', 'status']));

      // Only Super Admins can create or delete users directly.
      allow create, delete: if isSuperAdmin();
    }

    // ============== DISPENSARIES ==============
    match /dispensaries/{dispensaryId} {
      // Public can read approved dispensaries
      allow get: if resource.data.status == 'Approved';
      // Authenticated users can list approved dispensaries
      allow list: if request.auth != null && request.query.get('status') == 'Approved';
      
      // Dispensary admins can read their own dispensary document
      allow read: if isDispensaryAdmin(dispensaryId);

      // Anyone can create an application (public sign-up form)
      allow create: if request.auth == null;
      
      // Only admins of that dispensary or super admins can update
      allow update: if isDispensaryAdmin(dispensaryId) || isSuperAdmin();

      // Only Super Admins can delete
      allow delete: if isSuperAdmin();
    }
    
    // ============== DISPENSARY TYPES ==============
    match /dispensaryTypes/{typeId} {
      // Anyone can read dispensary types
      allow read: if true;
      // Only Super Admins can write to dispensary types
      allow write: if isSuperAdmin();
    }

    // ============== DISPENSARY TYPE PRODUCT CATEGORIES ==============
    match /dispensaryTypeProductCategories/{docId} {
      // Anyone can read product categories
      allow read: if true;
      // Only Super Admins can write
      allow write: if isSuperAdmin();
    }

    // ============== PRODUCTS ==============
    match /products/{productId} {
        // Allow anyone to read any product. This is essential for public storefronts.
        allow get: if true;
        
        // Allow listing under two conditions:
        // 1. For public storefronts (filtering by a specific dispensaryId).
        // 2. For dispensary admins querying their own products.
        allow list: if (request.query.get('dispensaryId') != null) || 
                       (request.auth != null && request.query.get('dispensaryId') == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dispensaryId);
                       
        // Allow write access only to the admin of that dispensary or a super admin.
        allow write: if isDispensaryAdmin(request.resource.data.dispensaryId) || isSuperAdmin();
    }

    // ============== PRODUCT REQUESTS ==============
    match /productRequests/{requestId} {
      // Users can only read/write requests where they are either the owner or the requester.
      allow read, write: if isDispensaryAdmin(resource.data.productOwnerDispensaryId) || 
                            isDispensaryAdmin(resource.data.requesterDispensaryId) ||
                            isSuperAdmin();
    }

    // ============== POOL ISSUES ==============
    match /poolIssues/{issueId} {
       // Only Super Admins can manage pool issues.
       allow read, write, create, delete: if isSuperAdmin();
    }

    // ============== CREDIT PACKAGES ==============
    match /creditPackages/{packageId} {
        // Anyone can see active credit packages.
        allow read: if resource.data.isActive == true || isSuperAdmin();
        // Only Super Admins can create/update/delete packages.
        allow write: if isSuperAdmin();
    }

    // ============== AI INTERACTIONS LOG ==============
    match /aiInteractionsLog/{logId} {
        // A user can only create their own log entries.
        allow create: if request.auth.uid == request.resource.data.userId;
        // A user can read their own logs. Dispensary owners can read logs for their dispensary. Super Admins can read all.
        allow read: if request.auth.uid == resource.data.userId || 
                     isDispensaryAdmin(resource.data.dispensaryId) || 
                     isSuperAdmin();
    }

    // ============== STICKER SETS ==============
    match /stickersets/{setId} {
        // Anyone can read public sticker sets
        allow read: if resource.data.isPublic == true;
        // The creator can read their own sets even if private
        allow get: if resource.data.creatorUid == request.auth.uid;
        // A user can create a sticker set for themselves
        allow create: if request.auth.uid == request.resource.data.creatorUid;
        // Only the creator can update or delete their own set
        allow update, delete: if resource.data.creatorUid == request.auth.uid;
    }

    // ============== IMPORTS HISTORY ==============
    match /importsHistory/{importId} {
      // Only super admins can read/write import history
      allow read, write: if isSuperAdmin();
    }
  }
}
