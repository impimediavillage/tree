rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get a user's role and dispensaryId from their user document.
    // This is the foundation for most of our security rules.
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can always read and update their own profile.
      allow read, update: if request.auth.uid == userId;

      // A Super Admin can read and write any user document.
      allow read, write: if getUserData(request.auth.uid).role == 'Super Admin';
      
      // A Dispensary Owner can read user documents that belong to their dispensary.
      // This allows them to view their staff and linked leaf users.
      allow list: if getUserData(request.auth.uid).role == 'DispensaryOwner'
                  && request.query.where.dispensaryId == getUserData(request.auth.uid).dispensaryId;
                  
      // Allow a dispensary owner to update a user in their dispensary
      allow update: if getUserData(request.auth.uid).role == 'DispensaryOwner'
                      && getUserData(userId).dispensaryId == getUserData(request.auth.uid).dispensaryId;
    }

    // Rules for the 'dispensaries' collection
    match /dispensaries/{dispensaryId} {
      // Anyone can read a dispensary document if it is 'Approved'.
      // This is crucial for public storefront listings.
      allow get: if resource.data.status == 'Approved';
      allow list: if request.query.where.status == 'Approved';

      // Super Admins can read/write any dispensary document regardless of status.
      allow read, write: if getUserData(request.auth.uid).role == 'Super Admin';

      // An authenticated user who is part of a dispensary can read their own dispensary doc.
      allow get: if request.auth.uid != null && getUserData(request.auth.uid).dispensaryId == dispensaryId;
      
      // A dispensary owner can update their own dispensary document.
      allow update: if request.auth.uid != null 
                    && getUserData(request.auth.uid).dispensaryId == dispensaryId
                    && getUserData(request.auth.uid).role == 'DispensaryOwner';
    }

    // Rules for the 'dispensaryTypes' collection
    match /dispensaryTypes/{typeId} {
      // Allow public read access for browsing types.
      allow read: if true;
      // Only Super Admins can create, update, or delete types.
      allow write: if getUserData(request.auth.uid).role == 'Super Admin';
    }

    // Rules for the 'dispensaryTypeProductCategories' collection
    match /dispensaryTypeProductCategories/{docId} {
        allow read: if true;
        allow write: if getUserData(request.auth.uid).role == 'Super Admin';
    }
    
    // Rules for the 'products' collection
    match /products/{productId} {
      // Anyone can read a product. This is for public store pages.
      allow get: if true;

      // Any authenticated user can list products. This allows public store pages to query products.
      // The query itself must be filtered on the client-side for approved dispensaries.
      allow list: if request.auth != null;

      // A user can create/update/delete a product ONLY if their dispensaryId matches the product's dispensaryId.
      // This gives store owners/staff full control over THEIR products.
      allow write: if request.auth.uid != null
                  && request.resource.data.dispensaryId == getUserData(request.auth.uid).dispensaryId;
    }
    
    // Rules for product sharing pool requests
    match /productRequests/{requestId} {
      // Allow read/write only by the involved parties (requester or owner) or a Super Admin.
      allow read, write: if request.auth.uid != null && 
                          (request.auth.uid == resource.data.requesterEmail || // This is a bug, should be UID
                           request.auth.uid == resource.data.productOwnerEmail || // This is a bug, should be UID
                           getUserData(request.auth.uid).role == 'Super Admin' ||
                           (getUserData(request.auth.uid).dispensaryId != null && 
                            (getUserData(request.auth.uid).dispensaryId == resource.data.requesterDispensaryId || 
                             getUserData(request.auth.uid).dispensaryId == resource.data.productOwnerDispensaryId)));
    }
    
    // Rules for managing issues in the product pool
    match /poolIssues/{issueId} {
      // Only Super Admins can manage pool issues.
      allow read, write: if getUserData(request.auth.uid).role == 'Super Admin';
    }

    // Rules for AI interaction logs
    match /aiInteractionsLog/{logId} {
        // A user can only create their own log entries.
        allow create: if request.auth.uid == request.resource.data.userId;
        // A user can only read their own log entries. Super Admins can read any.
        allow read: if request.auth.uid == resource.data.userId || 
                     getUserData(request.auth.uid).role == 'Super Admin';
    }
    
    // Rules for credit packages
    match /creditPackages/{packageId} {
        // Anyone can read the credit packages to see purchase options.
        allow read: if true;
        // Only Super Admins can create or modify credit packages.
        allow write: if getUserData(request.auth.uid).role == 'Super Admin';
    }
    
    // Rules for sticker sets
    match /stickersets/{stickerId} {
        // Anyone can read a sticker set if it's public.
        allow get: if resource.data.isPublic == true;
        // The creator can always read their own set.
        allow get: if request.auth.uid == resource.data.creatorUid;
        // Creators can update their own sets (e.g., toggle isPublic).
        allow update, delete: if request.auth.uid == resource.data.creatorUid;
        // Any authenticated user can create a sticker set.
        allow create: if request.auth != null;
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
