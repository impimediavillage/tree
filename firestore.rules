rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user has a specific role
    function hasRole(role) {
      return request.auth.token.role == role;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is associated with a specific dispensary
    function isDispensaryMember(dispensaryId) {
      return request.auth.token.dispensaryId == dispensaryId;
    }

    // USERS collection
    match /users/{userId} {
      allow get: if isOwner(userId) || hasRole('Super Admin');
      allow list: if hasRole('Super Admin');
      allow create: if isOwner(userId) || hasRole('Super Admin');
      allow update: if (isOwner(userId) && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'credits', 'status']))) || hasRole('Super Admin');
    }
    
    // DISPENSARIES collection
    match /dispensaries/{dispensaryId} {
      allow get: if resource.data.status == 'Approved' || isDispensaryMember(dispensaryId) || hasRole('Super Admin');
      allow list: if hasRole('Super Admin');
      allow create: if request.auth != null;
      allow update: if isDispensaryMember(dispensaryId) || hasRole('Super Admin');
      allow delete: if hasRole('Super Admin');
    }
    
    match /dispensaryTypes/{typeId} {
      allow read: if true;
      allow write: if hasRole('Super Admin');
    }

    match /dispensaryTypeProductCategories/{docId} {
      allow read: if true;
      allow write: if hasRole('Super Admin');
    }
    
    // PRODUCTS collection
    match /products/{productId} {
        allow get: if true;
        allow list: if hasRole('Super Admin');
        allow write: if isDispensaryMember(resource.data.dispensaryId) || hasRole('Super Admin');
    }
    
    // PRODUCT REQUESTS collection
    match /productRequests/{requestId} {
      allow read: if isDispensaryMember(resource.data.productOwnerDispensaryId) || isDispensaryMember(resource.data.requesterDispensaryId) || hasRole('Super Admin');
      allow create: if isDispensaryMember(request.resource.data.requesterDispensaryId);
      allow update: if isDispensaryMember(resource.data.productOwnerDispensaryId) || isDispensaryMember(resource.data.requesterDispensaryId) || hasRole('Super Admin');
    }

    // POOL ISSUES collection
     match /poolIssues/{issueId} {
      allow read, write: if hasRole('Super Admin');
      allow create: if request.auth != null; // Allow any auth user to create
    }
    
    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
        allow read, update, delete: if isOwner(resource.data.recipientUid) || hasRole('Super Admin');
        // Create is handled by backend functions
    }
    
    // CREDIT PACKAGES collection
    match /creditPackages/{packageId} {
      allow get: if resource.data.isActive == true || hasRole('Super Admin');
      allow list, write: if hasRole('Super Admin');
    }
    
    // AI INTERACTIONS LOG collection
    match /aiInteractionsLog/{logId} {
      allow get: if isOwner(resource.data.userId) || isDispensaryMember(resource.data.dispensaryId) || hasRole('Super Admin');
       // Create is handled by backend functions
    }

     // STICKER SETS collection
    match /stickersets/{setId} {
      allow get: if resource.data.isPublic == true;
      allow read, update, delete: if isOwner(resource.data.creatorUid) || hasRole('Super Admin');
      allow create: if request.auth != null;
      allow list: if hasRole('Super Admin');
    }
    
    // Seed data (read-only for authenticated users)
    match /my-seeded-collection/{strainId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      // update is handled by a callable function with its own auth check
      allow write: if false; 
    }
  }
}
