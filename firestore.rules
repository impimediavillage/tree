rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is a Super Admin
    function isSuperAdmin() {
      return isAuthenticated() && request.auth.token.role == 'Super Admin';
    }

    // Helper function to check if the user is an owner or staff of a specific dispensary
    function isOwnerOrStaff(dispensaryId) {
      return isAuthenticated() && request.auth.token.dispensaryId == dispensaryId
             && (request.auth.token.role == 'DispensaryOwner' || request.auth.token.role == 'DispensaryStaff');
    }

    // Default Deny: No one can read or write by default
    match /{document=**} {
      allow read, write: if false;
    }

    // Dispensaries: Anyone logged in can read, only Super Admins can write
    match /dispensaries/{dispensaryId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }
    
    // Dispensary Types & Categories: Anyone logged in can read, only Super Admins can write
    match /dispensaryTypes/{typeId} {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }
    match /dispensaryTypeProductCategories/{docId} {
       allow read: if isAuthenticated();
       allow write: if isSuperAdmin();
    }

    // Users: Can read/update their own profile. Super Admins can manage any.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isSuperAdmin();
      allow create: if true; // Signup creates user docs
    }

    // Products: Can be read by anyone. Writable only by staff of the owning dispensary or super admins.
    // This rule is applied generically. Specific collections can override it.
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isOwnerOrStaff(resource.data.dispensaryId) || isSuperAdmin();
    }
    
    // Specific Product Collections
    match /{collectionId}/{productId} {
        allow read: if true;
        // CREATE: User must be staff of the dispensary they are adding the product for.
        allow create: if isOwnerOrStaff(request.resource.data.dispensaryId);
        // UPDATE/DELETE: User must be staff of the dispensary that owns the product.
        allow update, delete: if isOwnerOrStaff(resource.data.dispensaryId) || isSuperAdmin();
    }

    // Credit Packages: Readable by anyone, writable only by super admins.
    match /creditPackages/{packageId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // AI Interaction Logs: Only readable by the user who created it or a Super Admin. Writable via backend only.
    match /aiInteractionsLog/{logId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isSuperAdmin());
      allow create: if isAuthenticated(); // Logged via trusted backend function
      allow update, delete: if false; // Logs should be immutable
    }

    // Product Requests: Readable by participants, writable based on role in the transaction.
    match /productRequests/{requestId} {
      allow read: if isAuthenticated() && (request.auth.token.dispensaryId == resource.data.productOwnerDispensaryId || request.auth.token.dispensaryId == resource.data.requesterDispensaryId || isSuperAdmin());
      allow create: if isAuthenticated() && request.auth.token.dispensaryId == request.resource.data.requesterDispensaryId;
      allow update: if isAuthenticated() && (request.auth.token.dispensaryId == resource.data.productOwnerDispensaryId || request.auth.token.dispensaryId == resource.data.requesterDispensaryId || isSuperAdmin());
      allow delete: if isSuperAdmin(); // Only admins can delete requests
    }
    
    // Sticker Sets: Publicly readable, only creator can write.
     match /stickersets/{setId} {
      allow read: if resource.data.isPublic == true || (isAuthenticated() && request.auth.uid == resource.data.creatorUid);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.creatorUid;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.creatorUid;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.creatorUid;
    }
  }
}
